<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Checkers</title>
    <!-- google fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fredoka+One|Source+Code+Pro" rel="stylesheet">
    <!-- page favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="public/images/checkers-favicon.ico">
    <!-- link the jQuery -->
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <!-- <script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script> -->
    <!-- link the js -->
    <script src="public/js/app.js" charset="utf-8"></script>
    <!-- link the scss -->
    <link rel="stylesheet" href="public/css/main.css">
  </head>
  <body>

    <div class="column">
        <div class="info">
          <h1>Checkers</h1>
          <hr>
          <p>Checkers rules</p>
        </div>
        <div class="stats">
          <h2>Game Statistics</h2>
          <div class="wrapper">
          <div id="player1">
            <h3>Player 1 (Top)</h3>
          </div>
          <div id="player2">
            <h3>Player 2 (Bottom)</h3>
          </div>
          </div>
          <div class="clearfix"></div>
          <div class="turn"></div>
          <button id="cleargame">Reset Game</button>
        </div>
      </div>
      <div class="column">
        <div id="board">
          <div class="tiles"></div>
          <div class="pieces">
            <div class="player1pieces">
            </div>
            <div class="player2pieces">
            </div>
          </div>
      </div>
    </div>
  </body>
</html>


JS



$(()=>{
  //The initial setup
  var gameBoard = [
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  1,  0,  1,  0,  1,  0,  1,  0 ],
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ],
    [  0,  2,  0,  2,  0,  2,  0,  2 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ]
  ];
  //arrays to store the instances
  var pieces = [];
  var tiles = [];

  //distance formula
  var dist = function (x1, y1, x2, y2) {
    return Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2));
  };

  //Piece object - there are 24 instances of them in a checkers game
  function Piece (element, position) {
    //linked DOM element
    this.element = element;
    //positions on gameBoard array in format row, column
    this.position = position;
    //which player's piece i it
    this.player = '';
    //figure out player by piece id
    if(this.element.attr('id') < 12)
      this.player = 1;
    else
      this.player = 2;
    //makes object a king
    this.king = false;
    this.makeKing = function () {
      this.element.css(`backgroundImage', 'url('king'+this.player+'.png')`);
      this.king = true;
    };

    //moves the piece
    this.move = function (tile) {
      this.element.removeClass('selected');
      if(!Board.isValidPlacetoMove(tile.position[0], tile.position[1])) return false;
      //make sure piece doesn't go backwards if it's not a king
      if(this.player === 1 && this.king === false) {
        if(tile.position[0] < this.position[0]) return false;
      } else if (this.player === 2 && this.king === false) {
        if(tile.position[0] > this.position[0]) return false;
      }
      //remove the mark from Board.board and put it in the new spot
      Board.board[this.position[0]][this.position[1]] = 0;
      Board.board[tile.position[0]][tile.position[1]] = this.player;
      this.position = [tile.position[0], tile.position[1]];
      //change the css using board's dictionary
      this.element.css('top', Board.dictionary[this.position[0]]);
      this.element.css('left', Board.dictionary[this.position[1]]);
      //if piece reaches the end of the row on opposite side crown it a king (can move all directions)
      if(!this.king && (this.position[0] === 0 || this.position[0] === 7 ))
        this.makeKing();
      Board.changePlayerTurn();
      return true;
    };

    //tests if piece can jump anywhere
    this.canJumpAny = function () {
      if(this.canOpponentJump([this.position[0]+2, this.position[1]+2]) ||
         this.canOpponentJump([this.position[0]+2, this.position[1]-2]) ||
         this.canOpponentJump([this.position[0]-2, this.position[1]+2]) ||
         this.canOpponentJump([this.position[0]-2, this.position[1]-2])) {
        return true;
      } return false;
    };

    //tests if an opponent jump can be made to a specific place
    this.canOpponentJump = function(newPosition) {
      //find what the displacement is
      var dx = newPosition[1] - this.position[1];
      var dy = newPosition[0] - this.position[0];
      //make sure object doesn't go backwards if not a king
      if(this.player === 1 && this.king === false) {
        if(newPosition[0] < this.position[0]) return false;
      } else if (this.player === 2 && this.king === false) {
        if(newPosition[0] > this.position[0]) return false;
      }
      //must be in bounds
      if(newPosition[0] > 7 || newPosition[1] > 7 || newPosition[0] < 0 || newPosition[1] < 0) return false;
      //middle tile where the piece to be conquered sits
      var tileToCheckx = this.position[1] + dx/2;
      var tileToChecky = this.position[0] + dy/2;
      //if there is a piece there and there is no piece in the space after that
      if(!Board.isValidPlacetoMove(tileToChecky, tileToCheckx) && Board.isValidPlacetoMove(newPosition[0], newPosition[1])) {
        //find which object instance is sitting there
        for(const pieceIndex in pieces) {//using const on pieceIndex
          if(pieces[pieceIndex].position[0] === tileToChecky && pieces[pieceIndex].position[1] === tileToCheckx) {
            if(this.player !== pieces[pieceIndex].player) {
              //return the piece sitting there
              return pieces[pieceIndex];
            }
          }
        }
      }
      return false;
    };

    this.opponentJump = function (tile) {
      var pieceToRemove = this.canOpponentJump(tile.position);
      //if there is a piece to be removed, remove it
      if(pieceToRemove) {
        pieces[pieceIndex].remove();
        return true;
      }
      return false;
    };

    this.remove = function () {
      //remove it and delete it from the gameboard
      this.element.css('display', 'none');
      if(this.player === 1) $('#player2').append(`<div class='capturedPiece'></div>`);
      if(this.player === 2) $('#player1').append(`<div class='capturedPiece'></div>`);
      Board.board[this.position[0]][this.position[1]] = 0;
      //reset position so it doesn't get picked up by the for loop in the canOpponentJump method
      this.position = [];
    };
  }

  function Tile (element, position) {
    //linked DOM element
    this.element = element;
    //position in gameboard
    this.position = position;
    //if tile is in range from the piece
    this.inRange = function(piece) {
      if(dist(this.position[0], this.position[1], piece.position[0], piece.position[1]) === Math.sqrt(2)) {
        //regular move
        return 'regular';
      } else if(dist(this.position[0], this.position[1], piece.position[0], piece.position[1]) === 2 * Math.sqrt(2)) {
        //jump move
        return 'jump';
      }
    };
  }

  //Board object - controls logistics of game
  var Board = {
    board: gameBoard,
    playerTurn: 1,
    tilesElement: $('div.tiles'),
    //dictionary to convert position in Board.board to the viewport units
    dictionary: ['0vmin', '10vmin','20vmin', '30vmin', '40vmin', '50vmin', '60vmin', '70vmin', '80vmin', '90vmin'],
    //initialize the 8x8 board
    initalize: function () {
      var countPieces = 0;
      var countTiles = 0;
      for (let row in this.board) { //row is the index using const
        for (let column in this.board[row]) { //column is the index using const
          //whole set of if statements control where the tiles and pieces should be placed on the board
          if(row%2 === 1) {
            if(column%2 === 0) {
              this.tilesElement.append(`<div class='tile' id='tile ${countTiles}' style='top: ${this.dictionary[row]};left:${this.dictionary[column]};'></div>`);
              tiles[countTiles] = new Tile($('#tile'+countTiles), [parseInt(row), parseInt(column)]);
              countTiles += 1;
            }
          } else {
            if(column%2 === 1) {
              this.tilesElement.append(`<div class='tile' id='tile ${countTiles}' style='top:${this.dictionary[row]};left:${this.dictionary[column]};'></div>`);
              tiles[countTiles] = new Tile($('#tile'+countTiles), [parseInt(row), parseInt(column)]);
              countTiles += 1;
            }
          }
          if(this.board[row][column] === 1) {
            $('.player1pieces').append(`<div class='piece' id='${countPieces}' style='top:${this.dictionary[row]};left:${this.dictionary[column]};'></div>`);
            pieces[countPieces] = new Piece($('#'+countPieces), [parseInt(row), parseInt(column)]);
            countPieces++;
          } else if(this.board[row][column] === 2) {
            $('.player2pieces').append(`<div class='piece' id='${countPieces}' style='top:${this.dictionary[row]};left:${this.dictionary[column]};'></div>`);
            pieces[countPieces] = new Piece($('#'+countPieces), [parseInt(row), parseInt(column)]);
            countPieces++;
          }
        }
      }
    },
    //check if the location has an object
    isValidPlacetoMove: function (row, column) {
      console.log(row); console.log(column); console.log(this.board);
      if(this.board[row][column] === 0) {
        return true;
      } return false;
    },
    //change the active player - also changes div.turn's CSS
    changePlayerTurn: function () {
      if(this.playerTurn === 1) {
        this.playerTurn = 2;
        $('.turn').css('background','linear-gradient(to right, transparent 50%, #BEEE62 50%)');
        return;
      }
      if(this.playerTurn === 2) {
        this.playerTurn = 1;
        $('.turn').css('background', 'linear-gradient(to right, #BEEE62 50%, transparent 50%)');
      }
    },
    //reset the game
    clear: function () {
      location.reload();
    }
  };

  //initialize the board
  Board.initalize();

  /***
  Events
  ***/

  //select the piece on click if it is the player's turn
  $('.piece').on('click', function () {
    var selected;
    var isPlayersTurn = ($(this).parent().attr('class').split(' ')[0] === 'player'+Board.playerTurn+'pieces');
    if(isPlayersTurn) {
      if($(this).hasClass('selected')) selected = true;
      $('.piece').each(function(index) {
        $('.piece').eq(index).removeClass('selected');
      });
      if(!selected) {
        $(this).addClass('selected');
      }
    }
  });

  //reset game when clear button is pressed
  $('#cleargame').on('click', function () {
    Board.clear();
  });

  //move piece when tile is clicked
  $('.tile').on('click', function () {
    //make sure a piece is selected
    if($('.selected').length !== 0) {
      //find the tile object being clicked
      var tileID = $(this).attr('id').replace(/tile/, '');
      var tile = tiles[tileID];
      //find the piece being selected
      var piece = pieces[$('.selected').attr('id')];
      //check if the tile is in range from the object
      var inRange = tile.inRange(piece);
      if(inRange) {
        //if the move needed is jump, then move it but also check if another move can be made (double and triple jumps)
        if(inRange === 'jump') {
          if(piece.opponentJump(tile)) {
            piece.move(tile);
            if(piece.canJumpAny()) {
              Board.changePlayerTurn(); //change back to original since another turn can be made
              piece.element.addClass('selected');
            }
          }
          //if it's regular then move it if no jumping is available
        } else if(inRange === 'regular') {
          if(!piece.canJumpAny()) {
            piece.move(tile);
          } else {
            alert(`You must jump when possible!`);
          }
        }
      }
    }
  });//end click tile function
});//end of load JS


SCSS
html, body {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  color: #333333;
  font-family: "Lato", Calibri, sans-serif;
  font-size: 16px;
  background-color: #3A3042; }
  html h2, body h2 {
    font-size: 1.3em; }
  html h3, body h3 {
    font-size: 1.1em; }
  html a, body a {
    text-decoration: none;
    color: #333333;
    font-weight: 700; }
    html a:hover, body a:hover {
      text-decoration: underline; }
  html hr, body hr {
    border: 0;
    height: 1px;
    background-color: #333;
    background-image: linear-gradient(to right, #333333, #ccc); }
  html .clearfix, body .clearfix {
    clear: both; }

div.column {
  position: relative;
  float: left;
  overflow: auto;
  height: 100%;
  min-height: 100%;
  width: 50%; }

@media screen and (max-width: 1000px) {
  div.column {
    width: 100% !important;
    overflow: hidden;
    height: auto; } }
div.info, div.stats {
  width: 70%;
  margin: 15vmin auto 0;
  box-sizing: border-box;
  padding: 20px 30px;
  background-color: #F1F1FF;
  color: #3A3042;
  border-radius: 3px;
  box-shadow: 1px 1px 3px #232621; }

div.stats {
  margin: 50px auto !important; }
  div.stats .wrapper {
    display: flex; }
  div.stats #player1 {
    text-align: center;
    display: inline-block;
    width: 50%;
    float: left;
    background-color: #B93848;
    box-sizing: border-box;
    padding: 0 15px 20px;
    border-top-left-radius: 3px;
    color: #232621; }
    div.stats #player1 .capturedPiece {
      width: 2.4vmin;
      height: 2.4vmin;
      background-color: #232621;
      background-size: 65%;
      background-repeat: no-repeat;
      background-position: center;
      border-radius: 6vmin;
      display: inline-block;
      box-sizing: border-box;
      transition: all 0.2s linear;
      margin: 5px; }
  div.stats #player2 {
    text-align: center;
    display: inline-block;
    width: 50%;
    float: left;
    background-color: #232621;
    box-sizing: border-box;
    padding: 0 15px 20px;
    border-top-right-radius: 3px;
    color: #B93848; }
    div.stats #player2 .capturedPiece {
      width: 2.4vmin;
      height: 2.4vmin;
      background-color: #B93848;
      background-size: 65%;
      background-repeat: no-repeat;
      background-position: center;
      border-radius: 6vmin;
      display: inline-block;
      box-sizing: border-box;
      transition: all 0.2s linear;
      margin: 5px; }
  div.stats div.turn {
    height: 10px;
    width: 100%;
    background: linear-gradient(to right, #BEEE62 50%, transparent 50%);
    border-radius: 0 0 3px 3px; }
  div.stats button#cleargame {
    display: block;
    border: 0;
    color: #F1F1FF;
    border-radius: 5px;
    cursor: pointer;
    margin: 20px auto 10px;
    padding: 10px;
    background-color: #16A8C7;
    box-shadow: 1px 1px 3px #232621;
    transition: background-color 0.15s linear; }
    div.stats button#cleargame:hover {
      background-color: #0c5a6b; }

div#board {
  position: absolute;
  top: calc(50% - 40vmin);
  left: calc(50% - 40vmin);
  width: 80vmin;
  height: 80vmin;
  border-radius: 5px;
  box-shadow: 1px 1px 3px #232621;
  background-color: #B93848;
  overflow: hidden; }
  div#board .tile {
    width: 10vmin;
    height: 10vmin;
    position: absolute;
    background-color: #232621; }
  div#board .player1pieces .piece {
    position: absolute;
    width: 8vmin;
    height: 8vmin;
    background-color: #e4a6ae;
    background-size: 65%;
    background-repeat: no-repeat;
    background-position: center;
    border-radius: 6vmin;
    display: inline-block;
    box-sizing: border-box;
    transition: all 0.2s linear;
    margin-top: 1vmin;
    margin-left: 1vmin;
    cursor: pointer;
    border: 1vmin solid #B93848; }
    div#board .player1pieces .piece.selected {
      box-shadow: 0 0 10px 5px #16A8C7; }
  div#board .player2pieces .piece {
    position: absolute;
    width: 8vmin;
    height: 8vmin;
    background-color: #F1F1FF;
    background-size: 65%;
    background-repeat: no-repeat;
    background-position: center;
    border-radius: 6vmin;
    display: inline-block;
    box-sizing: border-box;
    transition: all 0.2s linear;
    margin-top: 1vmin;
    margin-left: 1vmin;
    cursor: pointer;
    border: 1vmin solid #8b8bff; }
    div#board .player2pieces .piece.selected {
      box-shadow: 0 0 10px 5px #16A8C7; }
