First know the rules of the game.
Rules

There are several alternative sets of rules by which to play checkers, the ones used in this game are based on the rules for American checkers and British draughts.

Object
The object of the game is to take all your opponent's pieces or place him in a position where he or she can no longer make any moves.

Turns
Players shall take turns at starting the game. The visitor shall start the first game.

Obligation to move
A player has to move, a player who can no longer move loses.

Moving pieces
All pieces, men and kings, can move only diagonally. Pieces can only move to adjacent unoccupied black squares except when making a jump (see below). Men may only move and jump forwards while kings may move and jump forwards as well as backwards.

Obligation to jump
If one player's piece has the opposing player's piece as a diagonal neighbour and the square behind the opposing player's piece is unoccupied the player can make a jump and remove his opponent's piece from the board. If a player can make a jump such player has an obligation to make a jump. If after making a jump another jump is possible the player must jump again (with the exception of pieces that have just been crowned).

Crowning
Upon reaching the last row on the far side of the checkers board, the so-called king row, a piece is crowned and becomes a king. Being crowned ends the move, a crowned piece may not continue with a jump even if possible.

Referee
The referee will step in to determine the winner, if during 20 moves (10 by each player), only kings have changed position (i.e. no man has moved forward and no piece has been removed from the board), and there appear to be repeating movements. In such cases the referee will determine the winner according to who holds the strongest position. Kings being worth more and men closer to the king row being worth more than those further away. In the event that both parties are of equal strength the referee shall call a draw.

Other rules
There are several rules which will not be enforced during this game:
A piece once touched has to be moved.
If you do not make a jump when one is possible you lose your moved piece.
A warning is issued after 5 minutes of inactivity if you do not make a move within the next minute you lose the game.

PSEUDO
/*
Init
1.Setup the board with pieces placed in the starting squares for player1 and player2
  -load the game board by having a counter for the pieces
  -pieces will be images, using .png or .gif or div circles format
  -Add pieces to the initial squares
  -Player 1 always starts ... in the ideal route....
  -A reset button to bring the pieces to the starting squares.

2. Check if the diagonal and if the next square is occupied,
    check if it's a player2 piece or friendly in all directions.
    If it's unoccupied and going forward towards the king row,
    and it's clicked, then move into that adjacent square
    and remove the piece from the initial square

3. If it's a player2 piece, check if the next diagonal square in all directions
  is occupied either by a player2 piece
  or friendly piece
  or it's the king row
  or is within bounds
  -If it not occupied, and the piece is player2's,
  then player1 is obliged to jump into the unoccupied square and check
  if the next diagonal square in all directions is occupied either by a player2 piece
  or friendly piece
  or it's the king row
  or is within bounds

  TAKING
  -If a piece has been jumped/taken, then remove the image it from the board.
4. Change player turns by removing player1 options/class to play and add player2 options/class

5.If the piece reaches the king row, check if it's player2's king row and within bounds,
  If it's player2's king row then crown.

  KING
6.If the piece is a king, then check the full length of the diagonals in all directions.
  -looping through each square to check if it's empty or occupied by player2's piece.
  -can go backwards as well within bounds.

7.If there's player2's piece then move to the an unoccupied square which has been clicked.

//OPTIONALS
1. Have a timer for each move





*/


When binding a click event with jQuery, the passed argument is the click event. If console.log-ed it will reveal the DOM element inside the .target property. event.target is a DOM element. So you can get the id by using event.target.id or, to stick to jQuery methods, one should use .attr('id') on the jQuery wrapper around the DOM element: $(event.target).attr(id).



rough code...

//targetting the events that's been triggered
// if($(event.target).hasClass('selected')){
//   $player1Pieces.removeClass('selected');
//   // $(event.target).addClass('selected');
//
// }else {
//   $(event.target).addClass('selected');
// }

// const id = $(event.target);//using event.target  to get the child id.
// console.log(id.attr('id'));//passed. outputs the div id of the selected piece

//selecting a piece

let selected = false;
if(id.hasClass('selected')){
  selected = true;
  $player1.each(function(index) {
    $player1.eq(index).removeClass('selected');
  });

} else if(!selected) {
  $(this).addClass('selected');
}


//load up jQuery
$(()=>{
  //check if jQuery is working by console logging
  console.log('clicked and jQuery is working');

  //VARIABLES
  // grabbing the board from DOM
  const $checkersBoard = $('#checkers-board');
  const $squareOnBoard = $('.squares');
  const $player1Pieces = $('.player1-pieces');
  const $player2Pieces = $('.player2-pieces');
  //an array to store the 24 pieces of checkers
  const pieces = [];
  //an array to store the squares
  const squares = [];
  //the player depending on whether it's player one or two
  let player = null;
  //set the king status to boolean false initially
  let king = false;
  //the checkersBoard multidimensional array with piece postions to simulate the real world game board
  const checkersBoard =
    [
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  1,  0,  1,  0,  1,  0,  1,  0 ],
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ],
    [  0,  2,  0,  2,  0,  2,  0,  2 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ]
    ];


  setupBoard();




  //CHECKERS BOARD
  //to the checkersBoard append a div with a class black and add a backgroundColor alternate
  //between black and white.
  // creating the checkers-board by looping through the multidimensional array and adding divs
  function setupBoard(){
    let countSquares = 0;
    let countPieces = 0;
    for(let row =0; row < checkersBoard.length; row++) {
      const rowArray = checkersBoard[row];
      for (let column = 0; column < rowArray.length; column++) {

        //if the row is odd and the colunm is even set a square
        if(row % 2 === 1){
          console.log(row);
          if (column % 2 === 0) {
            this.$squareOnBoard.append(`<div class='black' id='square${countSquares}'></div>`);
            squares[countSquares] = new square($('#square'+countSquares),[parseInt(row), parseInt(column)]);
            countSquares++;
          } else if(column % 2 === 1){
            $squareOnBoard.append(`<div class='black' id='square${countSquares}'></div>`);
            squares[countSquares] =  new square($('#square'+countSquares),[parseInt(row), parseInt(column)]);
            countSquares++;
          }
        }
        // if this board's row and column is equal to 1 then add a piece to the board for player1
        //then increment the array by 1
        if(rowArray[column] === 1){
          $player1Pieces.append(`<div class='checkers-pieces' id='${countPieces}'></div>`);
          countPieces++;
          pieces[countPieces]= new piece(`$(id='${countPieces}')`,[parseInt(row), parseInt(column)]);
          //otherwise if the row and column number is equal to 2 then add a piece to the board for player 2
          //then increment the array by 1
        }else if (rowArray[column] === 2) {
          $player2Pieces.append(`<div class='checkers-pieces' id='${countPieces}'></div>`);
          countPieces++;
        }
        // const color = parseInt((column / 8) + column) % 2 === 0 ? 'white' : 'black';
        // $checkersBoard.append(`<div class='square ${color}' id='${countSquares}'></div>`);
        // countSquares++;

        console.log('test');
        console.log(rowArray[column]);
      }//end of inner for loop

    }//end of outter for loop




  }//end of setupBoard function



  //SQUARES
  function square(element, position){
    //using this to give local vars a context
    //element is the the div linked to the DOM
    this.element = element;
    // the positions are represented by the multidimensional array as row and column format
    this.position = position;
    //is this square in range
    // inRange();
    this.inRange = function (piece){
      if(distance(this.position[0],this.position[1],
                  piece.position[0],piece.position[1]) === Math.sqrt(2)){
        return 'normal-move'; //normal move
      }else if(distance(this.position[0], this.position[1],
                  piece.position[0],piece.position[1]) === 2 * Math.sqrt(2)){
        return 'jump-move'; //jump move
      }
    };

  }

  //DISTANCE
  // We use the Pythagoras Theorem to derive a formula for
  // finding the distance between two points in 2- and 3- dimensional space.
  function distance(x1,x2,y1,y2){
    return Math.sqrt(Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
  }


  //PIECES
  //the element in html and the position of the piece as ensure it's not a king
  //depending on the position of the piece, we can tell whether it's player 1 or 2 piece
  function piece(element, position){
    //using this to give local vars a context
    //element is the the div linked to the DOM
    this.element = element;
    // the postions are represented by the multidimensional array as row and column format
    this.position = position;
    console.log(`${element} and ${position}`);
    //who's piece is it, player place holder

    if (element < 12) {
      this.player = 1;
    } else {
      this.player = 2;
    }
    //this is not a king yet as king is default to false
    this.king;
  }

  //turning a regular piece into a king
  function kingMaker(){
    //element is the the div linked to the DOM
    this.element;
    // set king to true
    this.king = true;
  }

});//end of jQuery window load



// VARIABLES
$red: #cc0000;


@mixin checkers-piece-mixin {
  background-color: $red;
  display: inline-block;
  // background-size: 65%;
  border-radius: 50%;
  position: absolute;
}

.checkers-piece{
  @include checkers-piece-mixin;
}

html{
  position: absolute;
  height: 100%;
  width: 100%;
}

body{
  background-color: LightCyan;
  text-align: center;
  position: absolute;
  height: 100%;
  width: 100%;
}

h1{
  font-size: 48px;
  font-weight: 400;
  font-family: sans-serif;
}

footer{
  border: 1px solid black;
  overflow: hidden;
}

#checkers-board{
    border:1px solid black;
    position: relative;
    margin: 0 auto;
    max-width: 640px;
    height: 640px;
    border-radius: 5px;
    // overflow: hidden;
}

div{




}



.squares{
  background: grey;
  width:80px;
  height:80px;
  border-radius: 10px;
  display: inline-block;
  float: left;
  position: absolute;

}

.clearfix{
  content: '';
  visibility: hidden;
  clear: both;
  display: block;
  height: 0;
  font-size: 0;
}


Need to figure out the code.

// load jQuery
$(()=>{
// TEST jQuery is working
  console.log(`jQuery is working!`);//passed. output is jQuery is working!


//grab DOM elements
  const $checkersBoard = $('#checkers-board');
  const $squaresOnBoard = $('.squares');
  const $pieces = $('.pieces');
  //player1 piece class
  const $player1 =$('.player1');
  //player2 piece class
  const $player2 =$('.player2');
  let $player1Pieces = undefined;//not yet generated
  //player2 pieces
  let $player2Pieces = undefined;//not yet generated

//TEST dom elements are working
  console.log(`${$checkersBoard} `);//output is object Object


//setup GLOBAL VARIABLES
//board array with rows and columns to simulate the real world 8x8 board
  const checkersBoard = [
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  1,  0,  1,  0,  1,  0,  1,  0 ],
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ],
    [  0,  2,  0,  2,  0,  2,  0,  2 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ]
  ];

//incremental arrays to store the square and piece objects
  const pieces = [];
  const squares = [];
//players
  const player1 = 1;
  const player2 = 2;
//players turn
  let playerTurn = null;
//counters
  let countSquares = 0;
  let countPieces = 0;

  //DISTANCE
  // We use the Pythagoras Theorem to derive a formula for
  // finding the distance between two points in 2- and 3- dimensional space.
  function distance(x1,x2,y1,y2){
    return Math.sqrt(Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
  }
//array with view port conversion with top and left
//Viewport Minimum (vmin) — This unit is based on
//the smaller dimension of the viewport.
//If the viewport height is smaller than the width,
//the value of 1vmin will be equal to 1% of the viewport height.
//Similarly, if the viewport width is smaller than the height, the value of 1vmin will be equal to 1% of the viewport width.
  const viewportConversion = ['0vmin','10vmin','20vmin','30vmin','40vmin','50vmin','60vmin','70vmin'];

  //PIECES
  function piece (element, position) {
    //using this to give local vars a context
    //element is the the div linked to the DOM
    this.element = element;
    // console.log(this.element);
    //positions on gameBoard array in format row, column
    this.position = position;
    //TEST the position
    // console.log(`The piece position is: ${position}`);

    //who's piece is it, player place holder
    this.player = '';
    //figure out player by piece id

    if(this.element.attr('id') < 12)
      this.player1;
    else
      this.player2;

    // CROWN KING function
    this.king = false;
    this.crownKing = function(){
      this.king = true;
    };

    //MOVING the piece
    this.move = function (square) {
      this.element.removeClass('selected');
      if(!checkersBoard.squareIsEmpty(square.position[0], square.position[1])){
        return false;
      }
      //make sure piece doesn't go backwards if it's not a king
      if(this.player1 && this.king === false) {
        if(square.position[0] < this.position[0]) return false;
      } else if (this.player2 && this.king === false) {
        if(square.position[0] > this.position[0]){
          return false;
        }
      }
    };

    //REMOVING the piece mark from one checkersBoard's board postion and put it in the new position
    checkersBoard[this.position[0]][this.position[1]] = 0;
    checkersBoard[square.position[0]][square.position[1]] = this.player;
    this.position = [square.position[0], square.position[1]];
    //change the css using board's viewportConversion
    this.element.css('top', checkersBoard.viewportConversion[this.position[0]]);
    this.element.css('left', checkersBoard.viewportConversion[this.position[1]]);
    //if piece reaches the end of the row on opposite side crown it a king (can move all directions)
    if(!this.king && (this.position[0] === 0 || this.position[0] === 7 ))
      this.crownKing();
    checkersBoard.changePlayerTurn();
    return true;

  }//end of piece function

  //JUMPING
  //tests if piece can jump anywhere
  function canJumpAny() {
    if(canOpponentJump([this.position[0]+2, this.position[1]+2]) ||
     canOpponentJump([this.position[0]+2, this.position[1]-2]) ||
     canOpponentJump([this.position[0]-2, this.position[1]+2]) ||
     canOpponentJump([this.position[0]-2, this.position[1]-2])) {
      return true;
    } else {
      return false;
    }
  }

  function canOpponentJump(newPosition) {
      //find what the displacement is
    const dx = newPosition[1] - this.position[1];
    const dy = newPosition[0] - this.position[0];
      //make sure object doesn't go backwards if not a king
    if(this.player === 1 && this.king === false) {
      if(newPosition[0] < this.position[0]) return false;
    } else if (this.player === 2 && this.king === false) {
      if(newPosition[0] > this.position[0]) return false;
    }
      //must be in bounds
    if(newPosition[0] > 7 || newPosition[1] > 7 || newPosition[0] < 0 || newPosition[1] < 0) return false;
      //middle square where the piece to be conquered sits
    const squareToCheckx = this.position[1] + dx/2;
    const squareToChecky = this.position[0] + dy/2;
      //if there's a piece and there's no piece in the space after that
    if(!checkersBoard.squareIsEmpty(squareToChecky, squareToCheckx) && checkersBoard.squareIsEmpty(newPosition[0], newPosition[1])) {
        //find which piece object instance is sitting there
      for(pieceIndex in pieces) {
        if(pieces[pieceIndex].position[0] === squareToChecky && pieces[pieceIndex].position[1] === squareToCheckx) {
          if(this.player !== pieces[pieceIndex].player) {
              //return the piece sitting there
            return pieces[pieceIndex];
          }
        }
      }
    }
    return false;
  }

  function opponentJump (square) {
    const pieceToRemove = this.canOpponentJump(square.position);
  //if there is a piece to be removed, remove it
    if(pieceToRemove) {
      pieces[pieceIndex].remove();
      return true;
    }
    return false;
  }

  function remove () {
  //remove it and delete it from the gameboard
    this.element.css('display', 'none');
    if(this.player === 1) $('#player2').append(`<div class='capturedPiece'></div>`);
    if(this.player === 2) $('#player1').append(`<div class='capturedPiece'></div>`);
    $checkersBoard[this.position[0]][this.position[1]] = 0;
  //reset position so it doesn't get picked up by the for loop in the canOpponentJump method
    this.position = [];
  }

  //SQUARE
   //create a square object to attach to the checkersBoard
  function square (element, position) {
      //using this to give local variables a context
      //element is the the div linked to the DOM
    this.element = element;
      // the positions are represented by the multidimensional array as row and column format
    this.position = position;
      //TEST the square position
      // console.log(`This squares' position is: ${position}`);
      //if square is in range from the piece
    this.inRange = function(piece) {
      if(distance(this.position[0], this.position[1], piece.position[0],
                    piece.position[1]) === Math.sqrt(2)) {
        //normal-move
        return 'normal-move';
      } else if(distance(this.position[0], this.position[1],
                    piece.position[0], piece.position[1]) === 2 * Math.sqrt(2)) {
        //jump-move
        return 'jump-move';
      }
    };
  }
  //call the SETUP function/method to create the board and add pieces
  Board.setup();

  //BOARD OBJECT
  //create a board object
  const Board = {
    board: checkersBoard,
    //player 1 always starts
    playerTurn: player1,
    //loop through the array called checkersBoard indexed at 0
    setup: function(){
      for (const row in checkersBoard) {
          //TEST the rows index is working
          // console.log(row);//passed. output is 0,1,2,3,4,6,7
          //loop through the array elements or columns

        for (const column in checkersBoard[row]) {
          checkersBoard[row][column];
          //TEST the column index is being looped through
            // console.log(column);//passed. output is 0,1,2,3,4,6,7 foreach column

          //if the row is odd and the column even add a square
          if(row % 2 === 1 && column % 2 === 0 ){
              //TEST the row is correct-odd
              // console.log(row);//pass. output is 1,3,5,7
                //TEST the column is correct-even
                // console.log(column);//passed. output is 0,2,4,6
                //append a div representing a square to the $squaresOnBoard div with class
            $squaresOnBoard.append(`<div class='square' id='square${countSquares}' style='top:${viewportConversion[row]}; left:${viewportConversion[column]}'></div>`);
                //create a new squareObject and add the number of squares count to the squares counters
                //use the element id and position as arguments to create the squares
            squares[countSquares] = new square($('#squares'+countSquares), [parseInt(row), parseInt(column)]);
            countSquares++;
                // //TEST the countSquares works
                // console.log(countSquares);//passed. output is 1 to 16 index based is 0 to 15
          }else if(row % 2 === 0 && column % 2 === 1) {//otherwise if row is even.
              //TEST the column is correct-odd
              // console.log(column);//passed. output is 1,3,5,7
            $squaresOnBoard.append(`<div class='square' id='square${countSquares}' style='top:${viewportConversion[row]}; left:${viewportConversion[column]}'></div>`);
            squares[countSquares] = new square($('#square'+countSquares), [parseInt(row), parseInt(column)]);
                // console.log(`id='square${countSquares}`);
            countSquares++;

          }//end of else statement

              //add the pieces to the checkersBoard
          if(this.checkersBoard[row][column] === player1) {
            $player1.append(`<div class='player1-pieces' id='${countPieces}' style='top:${viewportConversion[row]}; left:${viewportConversion[column]};'></div>`);
            pieces[countPieces] = new piece($('#'+countPieces), [parseInt(row), parseInt(column)]);
            countPieces++;
              //TEST value of checkersBoard[row][column]
            // console.log(`checkersBoard row is: ${checkersBoard[row]} `);
            // console.log(`checkersBoard column is: ${checkersBoard[column]} `);
            // console.log(`checkersBoard row and column is: ${checkersBoard[row][column]}`);//passed.output is 1
          }else if(this.checkersBoard[row][column] === player2) {
            $player2.append(`<div class='player2-pieces' id='${countPieces}' style='top:${viewportConversion[row]}; left:${viewportConversion[column]};'></div>`);
            pieces[countPieces] = new piece($('#'+countPieces), [parseInt(row), parseInt(column)]);
            countPieces++;
              //TEST value of checkersBoard[row][column]
            // console.log(`checkersBoard row is: ${checkersBoard[row]} `);
            // console.log(`checkersBoard column is: ${checkersBoard[column]} `);
            // console.log(`checkersBoard 2 row and column is: ${checkersBoard[row][column]}`);//passed. output is 2
          }

        }//end of inner for loop
      }//end of outter for loop
    }//end of setup function


  }; //end of board object


  //player1 pieces grabbing these here after they've been generated declare at the top.
  $player1Pieces =$('.player1-pieces');
  //player2 pieces
  $player2Pieces =$('.player2-pieces');

  //SQUARE is empty
  function squareIsEmpty(row, column){
    //TEST row and column
    this.row = row;
    this.column = column;
    console.log(`value of row:${row} and value of column: ${column}`);
    //using a tenary operator (an operator accepting 3 operands)as shorthand
    //to if else check if there's an object
    //on the row and column (square)
    this.board[row][column] === 0 ? true : false;
  }

  //change the active player - also changes div.turn's CSS
  function changePlayerTurn() {
    if(this.playerTurn === 1) {
      this.playerTurn = 2;
      $('.turn').css('background', 'linear-gradient(to right, transparent 50%, #BEEE62 50%)');
      return;
    }
    if(this.playerTurn === 2) {
      this.playerTurn = 1;
      $('.turn').css('background', 'linear-gradient(to right, #BEEE62 50%, transparent 50%)');
    }
  }

  //reset the game
  function clear() {
    location.reload();
  }














  // CLICK EVENTS
  $squaresOnBoard.on('click',()=>{
    //TEST the click event works.
    // console.log(`click events works on the squares!`);
  });

  //SELECTING PIECES
  $pieces.on('click',(event)=>{
    // //TEST the click event works.
    // console.log(`click events works on the pieces!`);

    //TEST to get the parent class using jQuery
    console.log($(event.target).parent().attr('class'));


  });




//selecting player1Pieces
  $player1Pieces.on('click', (event)=> {

    if ($(event.target).hasClass('selected')) {
      $player1Pieces.removeClass('selected');
    }else{
      $(event.target).addClass('selected');
    }
    //select the piece on id on the right square
    //get the squarId and replace the word sqaure with ''
    const squareId = $(event.target).attr('id').replace(/square/i,'');
    const square = squares[squareId];
    console.log(`${square}`);

  });

  //selecting player2Pieces
  $player2Pieces.on('click', (event)=>{
    if ($(event.target).hasClass('selected')) {
      $player2Pieces.removeClass('selected');
    } else {
      $(event.target).addClass('selected');
    }
    const squareId = $(event.target).attr('id');
    console.log(`${squareId}`);
  });





});//end of jQuery load

The CSS

*{
  box-sizing: border-box;
}

html, body {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  color: #333333;
  font-family:'Source Code Pro', monospace;
  background-color: #E6EAEA; }



html a, body a {
    text-decoration: none;
    color: #333333;
    font-weight: 700; }
    html a:hover, body a:hover {
      text-decoration: underline; }

html hr, body hr {
    border: 0;
    height: 1px;
    background-color: #ECD06F;
     }

html body header h1 {
    font-size: 38px;
}

html body header{
  overflow: hidden;
}

html footer{
  overflow: hidden;

}
button {
  width: 20vmin;
  height: 5vmin;
  border-radius: 5px;
  box-shadow: 1px 1px 3px #232621;
  background-color: #DF6C4F;
  font-weight: 600;
  font-family: 'Source Code Pro', monospace;
  font-size: 15px;
  text-transform: uppercase;
  text-align: center;
  display: inline;
  padding: 10px;
  position: relative;

}

#checkers-board {
    position: absolute;
    top: calc(50% - 40vmin);
    left: calc(50% - 40vmin);
    width: 80vmin;
    height: 80vmin;
    border-radius: 5px;
    box-shadow: 1px 1px 3px #232621;
    background-color: #fff;
    overflow: hidden;
    }

#checkers-board .square {
      width: 10vmin;
      height: 10vmin;
      position: absolute;
      background-color: #232621; }

#checkers-board .player1-pieces {
      position: absolute;
      width: 8vmin;
      height: 8vmin;
      background-color: #e4a6ae;
      background-repeat: no-repeat;
      background-position: center;
      border-radius: 6vmin;
      display: inline-block;
      box-sizing: border-box;
      transition: all 0.2s linear;
      margin-top: 1vmin;
      margin-left: 1vmin;
      cursor: pointer;
      border: 1vmin solid #B93848; }

.selected {
      box-shadow: 0 0 10px 5px #16A8C7; }

#checkers-board .player2-pieces{
      position: absolute;
      width: 8vmin;
      height: 8vmin;
      background-color: #F1F1FF;
      background-size: 65%;
      background-repeat: no-repeat;
      background-position: center;
      border-radius: 6vmin;
      display: inline-block;
      transition: all 0.2s linear;
      margin-top: 1vmin;
      margin-left: 1vmin;
      cursor: pointer;
      border: 1vmin solid #8b8bff; }

#checkers-board .pieces .player2 .selected {
      box-shadow: 0 0 10px 5px #16A8C7; }

.clearfix{
  overflow: hidden;
}



.capturedPiece {
      width: 2.4vmin;
      height: 2.4vmin;
      background-color: #232621;
      background-size: 65%;
      background-repeat: no-repeat;
      background-position: center;
      border-radius: 6vmin;
      display: inline-block;
      box-sizing: border-box;
      transition: all 0.2s linear;
      margin: 5px;
    }


The HTML
<!-- HEADER -->
<header>
  <h1>Checkers</h1>
</header>

<main>
  <!-- GAME BOARD -->
  <div id="checkers-board">
    <!-- div for the board squares -->
    <div class="squares"></div>
    <!-- div for the pieces -->
    <div class="pieces">
      <!-- player1's pieces div -->
      <div class="player1"></div>
      <!-- player2's pieces div -->
      <div class="player2"></div>
    </div>
  </div>
  <!-- END OF GAME BOARD -->
</main>



<!-- FOOTER -->
<footer id="footer">
  <!-- RESET -->
  <button type="button" name="button" id="reset-button" >Reset</button>
</footer>
