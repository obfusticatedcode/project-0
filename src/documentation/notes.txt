First know the rules of the game.
Rules

There are several alternative sets of rules by which to play checkers, the ones used in this game are based on the rules for American checkers and British draughts.

Object
The object of the game is to take all your opponent's pieces or place him in a position where he or she can no longer make any moves.

Turns
Players shall take turns at starting the game. The visitor shall start the first game.

Obligation to move
A player has to move, a player who can no longer move loses.

Moving pieces
All pieces, men and kings, can move only diagonally. Pieces can only move to adjacent unoccupied black squares except when making a jump (see below). Men may only move and jump forwards while kings may move and jump forwards as well as backwards.

Obligation to jump
If one player's piece has the opposing player's piece as a diagonal neighbour and the square behind the opposing player's piece is unoccupied the player can make a jump and remove his opponent's piece from the board. If a player can make a jump such player has an obligation to make a jump. If after making a jump another jump is possible the player must jump again (with the exception of pieces that have just been crowned).

Crowning
Upon reaching the last row on the far side of the checkers board, the so-called king row, a piece is crowned and becomes a king. Being crowned ends the move, a crowned piece may not continue with a jump even if possible.

Referee
The referee will step in to determine the winner, if during 20 moves (10 by each player), only kings have changed position (i.e. no man has moved forward and no piece has been removed from the board), and there appear to be repeating movements. In such cases the referee will determine the winner according to who holds the strongest position. Kings being worth more and men closer to the king row being worth more than those further away. In the event that both parties are of equal strength the referee shall call a draw.

Other rules
There are several rules which will not be enforced during this game:
A piece once touched has to be moved.
If you do not make a jump when one is possible you lose your moved piece.
A warning is issued after 5 minutes of inactivity if you do not make a move within the next minute you lose the game.

PSEUDO
/*
Init
1.Setup the board with pieces placed in the starting squares for player1 and player2
  -load the game board by having a counter for the pieces
  -pieces will be images, using .png or .gif or div circles format
  -Add pieces to the initial squares
  -Player 1 always starts ... in the ideal route....
  -A reset button to bring the pieces to the starting squares.

2. Check if the diagonal and if the next square is occupied,
    check if it's a player2 piece or friendly in all directions.
    If it's unoccupied and going forward towards the king row,
    and it's clicked, then move into that adjacent square
    and remove the piece from the initial square

3. If it's a player2 piece, check if the next diagonal square in all directions
  is occupied either by a player2 piece
  or friendly piece
  or it's the king row
  or is within bounds
  -If it not occupied, and the piece is player2's,
  then player1 is obliged to jump into the unoccupied square and check
  if the next diagonal square in all directions is occupied either by a player2 piece
  or friendly piece
  or it's the king row
  or is within bounds

  TAKING
  -If a piece has been jumped/taken, then remove the image it from the board.
4. Change player turns by removing player1 options/class to play and add player2 options/class

5.If the piece reaches the king row, check if it's player2's king row and within bounds,
  If it's player2's king row then crown.

  KING
6.If the piece is a king, then check the full length of the diagonals in all directions.
  -looping through each square to check if it's empty or occupied by player2's piece.
  -can go backwards as well within bounds.

7.If there's player2's piece then move to the an unoccupied square which has been clicked.

//OPTIONALS
1. Have a timer for each move





*/

rough code...


//load up jQuery
$(()=>{
  //check if jQuery is working by console logging
  console.log('clicked and jQuery is working');

  //VARIABLES
  // grabbing the board from DOM
  const $checkersBoard = $('#checkers-board');
  const $squareOnBoard = $('.squares');
  const $player1Pieces = $('.player1-pieces');
  const $player2Pieces = $('.player2-pieces');
  //an array to store the 24 pieces of checkers
  const pieces = [];
  //an array to store the squares
  const squares = [];
  //the player depending on whether it's player one or two
  let player = null;
  //set the king status to boolean false initially
  let king = false;
  //the checkersBoard multidimensional array with piece postions to simulate the real world game board
  const checkersBoard =
    [
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  1,  0,  1,  0,  1,  0,  1,  0 ],
    [  0,  1,  0,  1,  0,  1,  0,  1 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  0,  0,  0,  0,  0,  0,  0,  0 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ],
    [  0,  2,  0,  2,  0,  2,  0,  2 ],
    [  2,  0,  2,  0,  2,  0,  2,  0 ]
    ];


  setupBoard();




  //CHECKERS BOARD
  //to the checkersBoard append a div with a class black and add a backgroundColor alternate
  //between black and white.
  // creating the checkers-board by looping through the multidimensional array and adding divs
  function setupBoard(){
    let countSquares = 0;
    let countPieces = 0;
    for(let row =0; row < checkersBoard.length; row++) {
      const rowArray = checkersBoard[row];
      for (let column = 0; column < rowArray.length; column++) {

        //if the row is odd and the colunm is even set a square
        if(row % 2 === 1){
          console.log(row);
          if (column % 2 === 0) {
            this.$squareOnBoard.append(`<div class='black' id='square${countSquares}'></div>`);
            squares[countSquares] = new square($('#square'+countSquares),[parseInt(row), parseInt(column)]);
            countSquares++;
          } else if(column % 2 === 1){
            $squareOnBoard.append(`<div class='black' id='square${countSquares}'></div>`);
            squares[countSquares] =  new square($('#square'+countSquares),[parseInt(row), parseInt(column)]);
            countSquares++;
          }
        }
        // if this board's row and column is equal to 1 then add a piece to the board for player1
        //then increment the array by 1
        if(rowArray[column] === 1){
          $player1Pieces.append(`<div class='checkers-pieces' id='${countPieces}'></div>`);
          countPieces++;
          pieces[countPieces]= new piece(`$(id='${countPieces}')`,[parseInt(row), parseInt(column)]);
          //otherwise if the row and column number is equal to 2 then add a piece to the board for player 2
          //then increment the array by 1
        }else if (rowArray[column] === 2) {
          $player2Pieces.append(`<div class='checkers-pieces' id='${countPieces}'></div>`);
          countPieces++;
        }
        // const color = parseInt((column / 8) + column) % 2 === 0 ? 'white' : 'black';
        // $checkersBoard.append(`<div class='square ${color}' id='${countSquares}'></div>`);
        // countSquares++;

        console.log('test');
        console.log(rowArray[column]);
      }//end of inner for loop

    }//end of outter for loop




  }//end of setupBoard function



  //SQUARES
  function square(element, position){
    //using this to give local vars a context
    //element is the the div linked to the DOM
    this.element = element;
    // the positions are represented by the multidimensional array as row and column format
    this.position = position;
    //is this square in range
    // inRange();
    this.inRange = function (piece){
      if(distance(this.position[0],this.position[1],
                  piece.position[0],piece.position[1]) === Math.sqrt(2)){
        return 'normal-move'; //normal move
      }else if(distance(this.position[0], this.position[1],
                  piece.position[0],piece.position[1]) === 2 * Math.sqrt(2)){
        return 'jump-move'; //jump move
      }
    };

  }

  //DISTANCE
  // We use the Pythagoras Theorem to derive a formula for
  // finding the distance between two points in 2- and 3- dimensional space.
  function distance(x1,x2,y1,y2){
    return Math.sqrt(Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
  }


  //PIECES
  //the element in html and the position of the piece as ensure it's not a king
  //depending on the position of the piece, we can tell whether it's player 1 or 2 piece
  function piece(element, position){
    //using this to give local vars a context
    //element is the the div linked to the DOM
    this.element = element;
    // the postions are represented by the multidimensional array as row and column format
    this.position = position;
    console.log(`${element} and ${position}`);
    //who's piece is it, player place holder

    if (element < 12) {
      this.player = 1;
    } else {
      this.player = 2;
    }
    //this is not a king yet as king is default to false
    this.king;
  }

  //turning a regular piece into a king
  function kingMaker(){
    //element is the the div linked to the DOM
    this.element;
    // set king to true
    this.king = true;
  }

});//end of jQuery window load



// VARIABLES
$red: #cc0000;


@mixin checkers-piece-mixin {
  background-color: $red;
  display: inline-block;
  // background-size: 65%;
  border-radius: 50%;
  position: absolute;
}

.checkers-piece{
  @include checkers-piece-mixin;
}

html{
  position: absolute;
  height: 100%;
  width: 100%;
}

body{
  background-color: LightCyan;
  text-align: center;
  position: absolute;
  height: 100%;
  width: 100%;
}

h1{
  font-size: 48px;
  font-weight: 400;
  font-family: sans-serif;
}

footer{
  border: 1px solid black;
  overflow: hidden;
}

#checkers-board{
    border:1px solid black;
    position: relative;
    margin: 0 auto;
    max-width: 640px;
    height: 640px;
    border-radius: 5px;
    // overflow: hidden;
}

div{




}



.squares{
  background: grey;
  width:80px;
  height:80px;
  border-radius: 10px;
  display: inline-block;
  float: left;
  position: absolute;

}

.clearfix{
  content: '';
  visibility: hidden;
  clear: both;
  display: block;
  height: 0;
  font-size: 0;
}
