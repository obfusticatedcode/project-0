"use strict";$(function(){function e(e,i){this.element=e,this.position=i,console.log("This squares' position is: "+i),this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,i,t){return Math.sqrt(Math.pow(e-s,2)+Math.pow(i-t,2))}function i(e,s){this.element=e,console.log(this.element),this.position=s,console.log("The piece position is: "+s),this.player="",this.element<12?this.player1:this.player2}console.log("jQuery is working!");var t=$("#checkers-board"),n=$(".squares"),o=$(".pieces"),a=$("#player1"),l=$("#player2");console.log(t+" ");var p=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],r=[],c=[],v=1,h=2,d=0,u=0,m=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){for(var s=0;s<p.length;s++){p[s];for(var t=0;t<p[s].length;t++)p[s][t],s%2==1&&t%2==0?(n.append("<div class='square' id='square"+d+"' style='top:"+m[s]+"; left:"+m[t]+"'></div>"),c[d]=new e($("#squares"+d),[parseInt(s),parseInt(t)]),d++):s%2==0&&t%2==1&&(n.append("<div class='square' id='square"+d+"' style='top:"+m[s]+"; left:"+m[t]+"'></div>"),c[d]=new e($("#square"+d),[parseInt(s),parseInt(t)]),d++),p[s][t]===v?(a.append("<div class='player1-pieces' id='"+u+"' style='top:"+m[s]+"; left:"+m[t]+";'></div>"),r[u]=new i($("#"+u),[parseInt(s),parseInt(t)]),u++):p[s][t]===h&&(l.append("<div class='player2-pieces' id='"+u+"' style='top:"+m[s]+"; left:"+m[t]+";'></div>"),r[u]=new i($("#"+u),[parseInt(s),parseInt(t)]),u++)}}(),n.on("click",function(){console.log("click events works on the squares!")}),o.on("click",function(){console.log("click events works on the pieces!");var e=null;$(void 0).parent().attr("class").split(" ")[0]==="player"+p.playerTurn+"pieces"&&($(void 0).hasClass("selected")&&(e=!0),$(".piece").each(function(e){$(".piece").eq(e).removeClass("selected")}),e||$(void 0).addClass("selected"))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
