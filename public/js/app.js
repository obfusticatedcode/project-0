"use strict";$(function(){function e(e,a){return{top:a*(o+n)+"px",left:e*(o+n)+"px"}}function a(e,a){return{x:a/(o+n),y:e/(o+n)}}function t(){var e=$("div.square"),t=$("div.piece").map(function(t,s){var i=$(s).position(),d=a(i.top,i.left),o=8*d.y+d.x;return e[o]});return $("div.square.dark").not(t)}function s(e,a,t){e.css("top",a),e.css("left",t)}function i(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function d(){$("#moveCounter").html(parseInt($("#moveCounter").html(),10)+1)}for(var o=46,n=2,l=$("div#board"),c=$("div#pieces"),r=0;r<64;r++)l.append($("<div/>").addClass("square"));!function(){function e(e){return e%8%2^Math.floor(e/8)%2}$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}();for(var v=0;v<24;v++)c.append($("<div/>").addClass("piece"));!function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),$("div.piece.light").each(function(a,t){var i=Math.floor(a/4),d=a%4*2+(1-i%2),o=e(d,i);s($(t),o.top,o.left)}),$("div.piece.dark").each(function(a,t){var i=Math.floor(a/4)+5,d=a%4*2+(1-i%2),o=e(d,i);s($(t),o.top,o.left)}),t().addClass("movable"),$("div.piece").click(function(){i($(this))}),$("div.square").click(function(){var a=$(this);if(a.hasClass("movable")){var i=$("div.piece.selected");if(1===i.length){var o=a.prevAll().length,n=o%8,l=Math.floor(o/8),c=e(n,l);s(i,c.top,c.left),d(),i.removeClass("selected"),$("div.square").removeClass("movable"),t().addClass("movable")}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
