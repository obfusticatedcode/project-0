"use strict";$(function(){function i(i,s){this.element=i,this.position=s,console.log("This squares' position is: "+s),this.inRange=function(i){return e(this.position[0],this.position[1],i.position[0],i.position[1])===Math.sqrt(2)?"normal-move":e(this.position[0],this.position[1],i.position[0],i.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function e(i,e,s,t){return Math.sqrt(Math.pow(i-e,2)+Math.pow(s-t,2))}function s(i,e){this.element=i,console.log(this.element),this.position=e,console.log("The piece position is: "+e),this.player="",this.element<12?this.player=1:this.player=2}console.log("jQuery is working!");var t=$("#checkers-board"),n=$(".squares"),o=$("#player1"),p=$("#player2");console.log(t+" ");var a=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],r=[],l=[],h=0,v=0,c=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){for(var e=0;e<a.length;e++){a[e];for(var t=0;t<a[e].length;t++)a[e][t],e%2==1&&t%2==0?(n.append("<div class='square' id='square"+h+"' style='top:"+c[e]+"; left:"+c[t]+"'></div>"),l[h]=new i($("#squares"+h),[parseInt(e),parseInt(t)]),h++):e%2==0&&t%2==1&&(n.append("<div class='square' id='square"+h+"' style='top:"+c[e]+"; left:"+c[t]+"'></div>"),l[h]=new i($("#square"+h),[parseInt(e),parseInt(t)]),h++),1===a[e][t]?(o.append("<div class='player1-pieces' id='"+v+"' style='top:"+c[e]+"; left:"+c[t]+";'></div>"),r[v]=new s($("#"+v),[parseInt(e),parseInt(t)]),v++):2===a[e][t]&&(p.append("<div class='player2-pieces' id='"+v+"' style='top:"+c[e]+"; left:"+c[t]+";'></div>"),r[v]=new s($("#"+v),[parseInt(e),parseInt(t)]),v++)}}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
