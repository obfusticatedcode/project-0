"use strict";$(function(){function e(e,s){this.element=e,this.position=s,this.inRange=function(e){return i(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":i(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function i(e,i,s,t){return Math.sqrt(Math.pow(e-i,2)+Math.pow(s-t,2))}function s(e,i){this.element=e,console.log(this.element),this.position=i,this.player="",this.element<12?this.player=1:this.player=2}console.log("jQuery is working!");var t=$("#checkers-board"),o=$(".squares"),n=$(".player1-pieces"),p=$(".player2-pieces");console.log(t+" ");for(var r=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],l=[],a=[],c=0,v=0,h=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"],u=0;u<r.length;u++)for(var d=0;d<r[u].length;d++)r[u][d],u%2==1?d%2==0&&(console.log("viewport row"+u),console.log("viewport column "+d),o.append("<div class='square' id='square"+c+"' style='top:"+h[u]+"; left:"+h[d]+"'></div>"),a[c]=new e($("#squares"+c),[parseInt(u),parseInt(d)]),c++,console.log("view port row"+u),console.log("view port column "+d)):d%2==1&&(o.append("<div class='square' id='square"+c+"' style='top:"+h[u]+"; left:"+h[d]+"'></div>"),a[c]=new e($("#square"+c),[parseInt(u),parseInt(d)]),c++),1===r[u][d]?(n.append("<div class='checkers-piece' id='"+v+"' style='top:"+h[u]+"; left:"+h[d]+"';'></div>"),l[v]=new s($("#"+v),[parseInt(u),parseInt(d)]),v+=1):2===r[u][d]&&(p.append("<div class='checkers-piece' id='"+v+"' style='top:"+h[u]+"; left:"+h[d]+"';'></div>"),l[v]=new s($("#"+v),[parseInt(u),parseInt(d)]),v+=1)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
