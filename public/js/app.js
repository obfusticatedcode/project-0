"use strict";$(function(){function e(){var e=$(event.target).position();return k=n(e.top,e.left)}function a(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function t(e,a){return{top:a*(f+h)+"px",left:e*(f+h)+"px"}}function n(e,a){return{x:a/(f+h),y:e/(f+h)}}function o(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var o=$(a).position(),i=n(o.top,o.left),s=8*i.y+i.x;t[s]=$(a)});var o=n(e.position().top,e.position().left),i=[{x:1,y:1},{x:-1,y:1}],s=[{x:1,y:-1},{x:-1,y:-1}],l=i.concat(s),r=void 0;r=e.hasClass("king")?l:e.hasClass("light")?i:s;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},d=$();return function n(o,i,s){if(!c(o)){var l=a.eq(8*o.y+o.x);$.each(i,function(i,r){var v={x:r.x+o.x,y:r.y+o.y};if(!c(v)){var u=8*v.y+v.x;if(t[u]){if(e.hasClass("dark")){if(t[u].hasClass("dark"))return}else if(t[u].hasClass("light"))return;var f={x:2*r.x+o.x,y:2*r.y+o.y};if(c(f))return;var h=8*f.y+f.x;if(!t[h]){var p=a.eq(h);if(!p.is(d)){d=d.add(p);var g=t[u];l.data("jumpedPieces")&&(g=g.add(l.data("jumpedPieces"))),p.data("jumpedPieces",g),n(f,r,!0)}}}else if(!s){var C=a.eq(u);C.data("jumpedPieces",$()),d=d.add(C)}}})}}(o,r,!1),d}function i(e,a,t){e.css("top",a),e.css("left",t)}function s(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function l(){P.html(parseInt(P.html())+1)}function r(e){var a="";a="light"===e?"#lightMoveCount":"#darkMoveCount";var t=parseInt($(a).html());t++,$(a).html(t),console.log(t),t%2==1?(console.log("Hello odd number"),console.log(q)):t%2==0&&(console.log("Hello even number"),console.log(b))}function c(e){e.data("jumpedPieces").remove()}function d(e,a){for(var t=0;t<64;t++)(a<8||a>=56)&&e.addClass("king")}function v(){var e=q.length,a=b.length;return 0===e?(y.text("Player 1 Wins"),y.slideDown("Player 1 Wins")):0===a?(console.log("Player 2 wins"),y.text("Player 2 Wins")):1===a&&1===e?(console.log("It's a draw"),y.text("It's a draw")):void 0}function u(){location.reload()}var f=46,h=2,p=$("div#board"),g=$("div#pieces"),C=$("#reset-button"),m=$("#rules-button"),x=$(".instructions"),y=$("#winner"),k=null;!function(){function e(e){return e%8%2^Math.floor(e/8)%2}for(var a=0;a<64;a++)p.append($("<div/>").addClass("square"));for(var t=0;t<24;t++)g.append($("<div/>").addClass("piece"));$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}(),function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),function(){$("div.piece.dark").each(function(e,a){var n=Math.floor(e/4)+5,o=e%4*2+(1-n%2),s=t(o,n);i($(a),s.top,s.left)})}(),function(){var e=$("div.piece.light");e.each(function(a,n){console.log(e.length);var o=Math.floor(a/4),s=a%4*2+(1-o%2),l=t(s,o);i($(n),l.top,l.left)})}(),C.on("click",function(){u()}),m.on("click",function(){x.toggle("slow"),console.log("Clicking here works")}),$("div.square").on("click",function(n){e();var o=$(n.target);if(o.hasClass("movable")){var s=$("div.piece.selected");if(1===s.length){var u=o.prevAll().length,f=u%8,h=Math.floor(u/8),p=t(f,h);i(s,p.top,p.left),c(o),d(s,o.prevAll().length),s.removeClass("selected"),$("div.square").removeClass("movable"),v(),l();r(!0===s.hasClass("light")?"light":"dark"),a()}}});var P=$("#moveCounter");!function(){$("div.piece").on("click",function(e){var t=$(e.target);s(t),a(),t.hasClass("selected")&&o(t).addClass("movable")})}();var b=$("div.piece.light"),q=$("div.piece.dark")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
