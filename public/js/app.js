"use strict";$(function(){function e(){var e=$(event.target).position();return m=i(e.top,e.left)}function a(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function t(e,a){return{top:a*(u+f)+"px",left:e*(u+f)+"px"}}function i(e,a){return{x:a/(u+f),y:e/(u+f)}}function s(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var s=$(a).position(),n=i(s.top,s.left),o=8*n.y+n.x;t[o]=$(a)});var s=i(e.position().top,e.position().left),n=[{x:1,y:1},{x:-1,y:1}],o=[{x:1,y:-1},{x:-1,y:-1}],l=n.concat(o),r=void 0;r=e.hasClass("king")?l:e.hasClass("light")?n:o;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},d=$();return function i(s,n,o){if(!c(s)){var l=a.eq(8*s.y+s.x);$.each(n,function(n,r){var v={x:r.x+s.x,y:r.y+s.y};if(!c(v)){var u=8*v.y+v.x;if(t[u]){if(e.hasClass("dark")){if(t[u].hasClass("dark"))return}else if(t[u].hasClass("light"))return;var f={x:2*r.x+s.x,y:2*r.y+s.y};if(c(f))return;var p=8*f.y+f.x;if(!t[p]){var h=a.eq(p);if(!h.is(d)){d=d.add(h);var C=t[u];l.data("jumpedPieces")&&(C=C.add(l.data("jumpedPieces"))),h.data("jumpedPieces",C),i(f,r,!0)}}}else if(!o){var g=a.eq(u);g.data("jumpedPieces",$()),d=d.add(g)}}})}}(s,r,!1),d}function n(e,a,t){e.css("top",a),e.css("left",t)}function o(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function l(){return g.html(parseInt($("#moveCounter").html(),10)+1)}function r(e){e.data("jumpedPieces").remove()}function c(e,a){for(var t=0;t<64;t++)(a<8||a>=56)&&e.addClass("king")}function d(){var e=$("div.piece.light"),a=$("div.piece.dark"),t=a.length,i=e.length;return 0===t?console.log("Player 1 wins"):0===i?console.log("Player 2 wins"):1===i&&1===t?console.log("It's a draw"):void 0}function v(){location.reload()}var u=46,f=2,p=$("div#board"),h=$("div#pieces"),C=$("#reset-button"),g=$("#moveCounter"),m=null;!function(){function e(e){return e%8%2^Math.floor(e/8)%2}for(var a=0;a<64;a++)p.append($("<div/>").addClass("square"));for(var t=0;t<24;t++)h.append($("<div/>").addClass("piece"));$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}(),function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),function(){$("div.piece.dark").each(function(e,a){var i=Math.floor(e/4)+5,s=e%4*2+(1-i%2),o=t(s,i);n($(a),o.top,o.left)})}(),function(){var e=$("div.piece.light");e.each(function(a,i){console.log(e.length);var s=Math.floor(a/4),o=a%4*2+(1-s%2),l=t(o,s);n($(i),l.top,l.left)})}(),$("div.piece").on("click",function(e){var t=$(e.target);o(t),a(),t.hasClass("selected")&&s(t).addClass("movable")}),$("div.square").on("click",function(i){e();var s=$(i.target);if(s.hasClass("movable")){var o=$("div.piece.selected");if(1===o.length){var v=s.prevAll().length,u=v%8,f=Math.floor(v/8),p=t(u,f);n(o,p.top,p.left),r(s),c(o,s.prevAll().length),o.removeClass("selected"),$("div.square").removeClass("movable"),d(),l(),a()}}}),function(){$("div.piece").hasClass("selected")&&console.log("hi")}(),C.on("click",function(){v()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiY3VycmVudFBvc2l0aW9uIiwicG9zaXRpb24iLCJldmVudCIsInRhcmdldCIsImNvb3JkcyIsImdldENvb3JkcyIsInRvcCIsImxlZnQiLCJyZXNldE1vdmFibGVzIiwicmVtb3ZlRGF0YSIsInJlbW92ZUNsYXNzIiwiZ2V0UGl4ZWxzIiwieCIsInkiLCJ3aWR0aCIsImJvcmRlciIsImdldE1vdmFibGVTcXVhcmVzIiwiJHBpZWNlIiwic3F1YXJlSW5kZXgiLCJ0YWtlblNxdWFyZXMiLCJlYWNoIiwiaW5kZXgiLCJwaWVjZSIsImRhcmtEaXJlY3Rpb24iLCJraW5nRGlyZWN0aW9uIiwibGlnaHREaXJlY3Rpb24iLCJjb25jYXQiLCJkaXJlY3Rpb24iLCJvdXRPZkJvdW5kcyIsIm5ld0Nvb3JkcyIsIm5ld1NxdWFyZUluZGV4IiwiJGxlZ2FsU3F1YXJlcyIsImhhc0NsYXNzIiwiYnVpbGRNb3ZlcyIsImp1bXBzT25seSIsIiRjdXJyZW50U3F1YXJlIiwianVtcENvb3JkcyIsImp1bXBTcXVhcmVJbmRleCIsImlzIiwiJGp1bXBlZFBpZWNlcyIsIiRuZXdTcXVhcmUiLCIkc3F1YXJlcyIsImVxIiwiYWRkIiwiZGF0YSIsInNldFVwUGllY2VzIiwiYWRkQ2xhc3MiLCJjc3MiLCJwaWVjZUNvdW50IiwibmV3VG9wIiwibmV3TGVmdCIsIiRwaWVjZXMiLCJhcHBlbmQiLCJ0b2dnbGVTZWxlY3QiLCJpIiwiaW5jcmVtZW50bW92ZUNvdW50ZXIiLCIkbGlnaHRQaWVjZXMiLCJodG1sIiwicGFyc2VJbnQiLCJyZW1vdmVDYXB0dXJlZFBpZWNlcyIsIiRzcXVhcmUiLCJyZW1vdmUiLCIkcmVzZXRCdXR0b24iLCJyZXNldCIsInBpZWNlc0xlZnQiLCIkZGFya1BpZWNlcyIsImRhcmtQaWVjZXMiLCJsZW5ndGgiLCJsaWdodFBpZWNlcyIsImNvbnNvbGUiLCJsb2ciLCJsb2NhdGlvbiIsInJlbG9hZCIsIiRib2FyZCIsIiRtb3ZlQ291bnRlciIsImxpZ2h0T3JEYXJrIiwiTWF0aCIsIm9kZFkiLCJ0aGlzIiwic3F1YXJlQ291bnQiLCJmbG9vciIsInBpeGVsUG9zaXRpb24iLCJtb3ZlUGllY2VUbyIsIm9uIiwiJHRoaXNQaWVjZSIsImUiLCIkc2VsZWN0ZWRQaWVjZSIsIiRwaWVjZVRvTW92ZSIsImNoZWNrS2luZyIsInBpeGVscyJdLCJtYXBwaW5ncyI6IllBQ0FBLEdBQUUsV0F1RkUsUUFBQUMsS0FDQSxHQUFBQyxHQUFBRixFQUFBRyxNQUFBQyxRQUFBRixVQU1BLE9BSkRHLEdBQUFDLEVBQUFKLEVBQUFLLElBQUFMLEVBQUFNLE1BaUVBLFFBQUFDLEtBVkNULEVBQUUsY0FBY1UsV0FBVyxnQkFBZ0JDLFlBQVksV0EyQnpELFFBQUFDLEdBQUFDLEVBQUFDLEdBR0ksT0FDRlAsSUFBT08sR0FBQUMsRUFBQUMsR0FBQSxLQUNMUixLQUFLQSxHQUFRTyxFQUFBQSxHQURSLE1BUVQsUUFBU0UsR0FBQUEsRUFBQUEsR0FHUCxPQVZFSixFQUFLTCxHQUFRTyxFQUFRQyxHQVl2QkYsRUFBQVAsR0FBQVEsRUFBQUMsSUFNUSxRQUFBQyxHQUFBQyxHQUdOLEdBQU1DLEdBQUFBLEVBQUFBLGNBTkpDLElBWUpwQixHQUFBLGFBQUFxQixLQUFBLFNBQUFDLEVBQUFDLEdBTUEsR0FBTUMsR0FBQUEsRUFDRkQsR0FBQXJCLFdBR0pHLEVBQUFDLEVBQUFKLEVBQUFLLElBQUFMLEVBQUFNLE1BQ01pQixFQUFnQkMsRUFBQUEsRUFBQUEsRUFBZUMsRUFBT0gsQ0FoQjFDSixHQUFhRCxHQUFlbkIsRUFBRXVCLElBb0I5QkssSUFBQUEsR0FBWUgsRUFBQUEsRUFBWnZCLFdBQUFLLElBQUFXLEVBQUFoQixXQUFBTSxNQUNLa0IsSUFHTEUsRUFBQUEsRUFBQUEsRUFBQUEsSUFDRGYsR0FBQSxFQUFBQyxFQUFBLElBR0NVLElBREZYLEVBQUEsRUFBQUMsR0FBQSxJQWRLRCxHQUFJLEVBQUVDLEdBQUksSUFvQlRlLEVBQVl4QixFQUFTc0IsT0FBQUgsR0FF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Q01ULEVBQUtTLEVBQUQsRUFBQSxHQUF1QlIsRUFBRUEsRUFBbkMsR0FHTW9FLEVBQWdCdEUsRUFBQUMsRUFBQUMsRUFFdEJxRSxHQUFZbkYsRUFBRXVCLEdBQWQyRCxFQUFxQkEsSUFBckJBLEVBQXVDQSxXQThCekNsRixFQUFBLGFBQUFvRixHQUFBLFFBQUEsU0FBQWpGLEdBS0EsR0FBQWtGLEdBQUFyRixFQUFBRyxFQUFBQyxPQUdBa0QsR0FBQStCLEdBQ0E1RSxJQUVDNEUsRUFBQXBELFNBQUEsYUFFQWhCLEVBQUFvRSxHQUFBdEMsU0FBQSxhQW9CRC9DLEVBQUEsY0FBQW9GLEdBQUEsUUFBQSxTQUFBRSxHQUNBckYsR0FHRSxJQUFNc0YsR0FBQUEsRUFBaUJ2RixFQUFFSSxPQUluQixJQUFBb0YsRUFBQXZELFNBQUEsV0FBQSxDQUdKLEdBQU1wQixHQUFOYixFQUFBLHFCQUdJLElBQUEsSUFBQXVGLEVBQUFuQixPQUFBLENBR0pSLEdBQUFBLEdBQUFBLEVBQXFCNEIsVUFBckJwQixPQUNBdkQsRUFBQVMsRUFBQSxFQUNBUixFQUFBK0QsS0FBQUksTUFBQTNELEVBQUEsR0FDQW1FLEVBQVVGLEVBQVYxRSxFQUF5QjJFLEVBRXpCRCxHQUFBQSxFQUEyQkcsRUFBQW5GLElBQTNCbUYsRUFBQWxGLE1BRUFvRCxFQUFBNEIsR0FHQXZCLEVBQUFBLEVBQUFBLEVBQUFBLFVBQUFBLFFBRUFULEVBQUFBLFlBQUFBLFlBSUR4RCxFQUFBLGNBQUFXLFlBQUEsV0F4Q0xzRCxJQStDQVQsSUFFRi9DLFFBbUJNLFdBQ0FULEVBQUEsYUFBQWlDLFNBQUEsYUFDRnFDLFFBQU9DLElBQUEsU0FpUVRSLEVBQWFxQixHQUFHLFFBQVMsV0FDdkJwQiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2xvYWRpbmcgSlNcbiQoKCk9PntcblxuICAvL0dMT0JBTCBWQVJJQUJMRVNcbiAgY29uc3Qgd2lkdGggPSA0NjtcbiAgY29uc3QgYm9yZGVyID0gMjtcbiAgY29uc3QgJGJvYXJkID0gJCgnZGl2I2JvYXJkJyk7XG4gIGNvbnN0ICRwaWVjZXMgPSAkKCdkaXYjcGllY2VzJyk7XG4gIGNvbnN0ICRyZXNldEJ1dHRvbiA9ICQoJyNyZXNldC1idXR0b24nKTtcbiAgY29uc3QgJG1vdmVDb3VudGVyID0gJCgnI21vdmVDb3VudGVyJyk7XG5cbiAgbGV0IGNvb3JkcyA9IG51bGw7Ly9zZXR0aW5nIGNvb3JkcyBnbG9iYWxseSBzbyBpdCdzIGNvbnN0YW50bHkgdXBkYXRpbmdcblxuICAvL3NldCB1cCB0aGUgYm9hcmQgd2l0aCB0aGUgY29ycmVjdCBjbGFzc2VzIGZvciB0aGUgbGlnaHQgYW5kIGRhcmsgc3F1YXJlc1xuICBzZXRVcEJvYXJkKCk7XG4gIC8vc2V0cyB1cCB0aGUgY2xhc3NlcyBmb3IgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBwaWVjZVxuICBzZXRVcFBpZWNlcygpO1xuICAvL3NldHRpbmcgdXAgdGhlIGRhcmtQaWVjZXNcbiAgZGFya1BpZWNlcygpO1xuICAvL0xJR0hUIFBJRUNFU1xuICAvLyBzZXR0aW5nIHVwIHRoZSBsaWdodFBpZWNlc1xuICBsaWdodFBpZWNlcygpO1xuXG5cblxuICBmdW5jdGlvbiBsaWdodFBpZWNlcygpe1xuICAgIGNvbnN0ICRsaWdodFBpZWNlcyA9ICQoJ2Rpdi5waWVjZS5saWdodCcpO1xuICAgIC8vdGhpcyBsb29wIG1vdmVzIGFsbCB0aGUgbGlnaHQgcGllY2VzIHRvIHRoZWlyIGluaXRpYWwgcG9zaXRpb25zXG4gICAgJGxpZ2h0UGllY2VzLmVhY2goZnVuY3Rpb24oaW5kZXgscGllY2UpIHtcbiAgICAgIC8vIFRFU1QgY2hlY2tpbmcgdGhlIGxlbmd0aFxuICAgICAgY29uc29sZS5sb2coJGxpZ2h0UGllY2VzLmxlbmd0aCk7XG4gICAgICAvL3R1cm5pbmcgdGhlIGluZGV4IChmcm9tIDAgLSAxMSlcbiAgICAgIC8vaW50byBhIHgseSBzcXVhcmUgY29vcmRpbmF0ZSB1c2luZyBtYXRoXG4gICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihpbmRleCAvIDQpO1xuICAgICAgY29uc3QgeCA9IChpbmRleCAlIDQpICogMiArICgxIC0geSUyKTtcblxuICAgICAgLy90dXJuaW5nIHRoZSB4LHkgY29vcmRpbmF0ZSBpbnRvIGEgcGl4ZWwgcG9zaXRpb25cbiAgICAgIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBnZXRQaXhlbHMoeCx5KTtcbiAgICAgIC8vYWN0dWFsbHkgbW92aW5nIHRoZSBwaWVjZSB0byBpdHMgaW5pdGlhbCBwb3NpdGlvblxuICAgICAgbW92ZVBpZWNlVG8oJChwaWVjZSkscGl4ZWxQb3NpdGlvbi50b3AscGl4ZWxQb3NpdGlvbi5sZWZ0KTtcbiAgICB9KTtcbiAgfS8vZW5kIG9mIGxpZ2h0UGllY2VzIGZ1bmN0aW9uXG5cblxuICAvL0RBUksgUElFQ0VTXG4gIGZ1bmN0aW9uIGRhcmtQaWVjZXMoKXtcbiAgICBjb25zdCAkZGFya1BpZWNlcyA9ICAgJCgnZGl2LnBpZWNlLmRhcmsnKTtcbiAgICAgICAgLy90aGlzIGxvb3AgbW92ZXMgYWxsIHRoZSBkYXJrIHBpZWNlcyB0byB0aGVpciBpbml0aWFsIHBvc2l0aW9uc1xuICAgICRkYXJrUGllY2VzLmVhY2goZnVuY3Rpb24oaW5kZXgscGllY2UpIHtcbiAgICAgICAgLy90dXJuaW5nIHRoZSBpbmRleCAoZnJvbSAwIC0gMTEpXG4gICAgICAgIC8vaW50byBhIHgseSBzcXVhcmUgY29vcmRpbmF0ZSB1c2luZyBtYXRoXG4gICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihpbmRleC80KSArIDU7XG4gICAgICBjb25zdCB4ID0gKGluZGV4ICUgNCkgKiAyICsgKDEteSUyKTtcblxuICAgICAgICAvL3R1cm5pbmcgdGhlIHgseSBjb29yZGluYXRlIGludG8gYSBwaXhlbCBwb3NpdGlvblxuICAgICAgY29uc3QgcGl4ZWxQb3NpdGlvbiA9IGdldFBpeGVscyh4LHkpO1xuICAgICAgICAvL21vdmluZyB0aGUgcGllY2UgdG8gaXRzIGluaXRpYWwgcG9zaXRpb25cbiAgICAgIG1vdmVQaWVjZVRvKCQocGllY2UpLHBpeGVsUG9zaXRpb24udG9wLHBpeGVsUG9zaXRpb24ubGVmdCk7XG4gICAgfSk7XG4gIH0vL2VuZCBvZiBkYXJrUGllY2VzIGZ1bmN0aW9uXG5cblxuXG4gIC8vRVZFTlRTXG5cblxuXG4gICQoJ2Rpdi5waWVjZScpLm9uKCdjbGljaycsKGV2ZW50KT0+e1xuXG4gICAgLy9zZWxlY3RlZCB2YXJpYWJsZVxuXG4gICAgLy90dXJuIGB0aGlzYCBpbnRvIGEgalF1ZXJ5IG9iamVjdFxuICAgIGNvbnN0ICR0aGlzUGllY2UgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgLy90b2dnbGluZyB0aGUgJ3NlbGVjdGVkJyBjbGFzcyBvZiB0aGlzIHBpZWNlXG4gICAgLy9hbmQgcG9zc2libGUgZGVzZWxlY3Rpbmcgb3RoZXIgcGllY2VzXG4gICAgdG9nZ2xlU2VsZWN0KCR0aGlzUGllY2UpO1xuICAgIHJlc2V0TW92YWJsZXMoKTtcbiAgICAvL2dldCB0aGUgbGVnYWwgbW92ZXMgZm9yIHRoaXNcbiAgICBpZiAoJHRoaXNQaWVjZS5oYXNDbGFzcygnc2VsZWN0ZWQnKSkge1xuICAgICAgZ2V0TW92YWJsZVNxdWFyZXMoJHRoaXNQaWVjZSkuYWRkQ2xhc3MoJ21vdmFibGUnKTtcbiAgICB9XG5cbiAgfSk7Ly9lbmQgb2YgcGllY2UgY2xpY2sgZXZlbnRcblxuICAvL2NoZWNrcyB0aGUgY3VycmVudFBvc2l0aW9uIG9mIHRoZSBjbGlja2VkIG9yIHNlbGVjdGVkIGRpdiBhbmQgcmV0dXJucyB0aGUgY29vcmRzLlxuICBmdW5jdGlvbiBjdXJyZW50UG9zaXRpb24oKXtcbiAgICBjb25zdCBwb3NpdGlvbiA9ICQoZXZlbnQudGFyZ2V0KS5wb3NpdGlvbigpO1xuICAgIGNvb3JkcyA9IGdldENvb3Jkcyhwb3NpdGlvbi50b3AscG9zaXRpb24ubGVmdCk7XG4gICAgLy8gY29uc29sZS5sb2coY29vcmRzKTsvL2dldHRpbmcgdGhlIGxvY2F0aW9uIG9mIHRoZSBwaWVjZVxuICAgIHJldHVybiBjb29yZHM7XG5cbiAgfVxuXG5cblxuICAkKCdkaXYuc3F1YXJlJykub24oJ2NsaWNrJywgKGUpPT57XG4gICAgY3VycmVudFBvc2l0aW9uKCk7Ly90aGUgY3VycmVudFBvc2l0aW9uIG9mIHRoZSBzcXVhcmU7IGNvb3Jkc1xuICAgIC8vIGNvbnNvbGUubG9nKCdjb29yZHMnLCBjb29yZHMpO1xuICAgIC8vdHVybiBgZSBvciBldmVudGAgaW50byBhIGpRdWVyeSBvYmplY3RcbiAgICBjb25zdCAkcGllY2VUb01vdmUgPSAkKGUudGFyZ2V0KTtcblxuXG4gICAgLy9pZiAkKHRoaXMpIGlzIGEgbGVnYWwgc3F1YXJlIHRvIG1vdmUgdG8uLi5cbiAgICBpZiAoJHBpZWNlVG9Nb3ZlLmhhc0NsYXNzKCdtb3ZhYmxlJykpIHtcblxuICAgICAgICAgIC8vZ2V0IHRoZSBwaWVjZSB3aXRoIHRoZSBjbGFzcyAnc2VsZWN0ZWQnXG4gICAgICBjb25zdCAkc2VsZWN0ZWRQaWVjZSA9ICQoJ2Rpdi5waWVjZS5zZWxlY3RlZCcpO1xuXG4gICAgICAgICAgLy9vbmx5IG1vdmUgaWYgdGhlcmUgaXMgZXhhY3RseSBvbmUgc2VsZWN0ZWQgcGllY2VcbiAgICAgIGlmICgkc2VsZWN0ZWRQaWVjZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vZ2V0IHRoZSBpbmRleCBvZiB0aGUgc3F1YXJlXG4gICAgICAgICAgICAvL2FuZCB0cmFuc2xhdGUgaXQgdG8gcGl4ZWwgcG9zaXRpb25cbiAgICAgICAgY29uc3QgaW5kZXggPSAkcGllY2VUb01vdmUucHJldkFsbCgpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgeCA9IGluZGV4ICUgODtcbiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoaW5kZXggLyA4KTtcbiAgICAgICAgY29uc3QgcGl4ZWxzID0gZ2V0UGl4ZWxzKHgseSk7XG4gICAgICAgICAgICAvL2FjdHVhbGx5IGRvIHRoZSBtb3ZpbmdcbiAgICAgICAgbW92ZVBpZWNlVG8oJHNlbGVjdGVkUGllY2UscGl4ZWxzLnRvcCxwaXhlbHMubGVmdCk7XG4gICAgICAgICAgLy9yZW1vdmVDYXB0dXJlZFBpZWNlc1xuICAgICAgICByZW1vdmVDYXB0dXJlZFBpZWNlcygkcGllY2VUb01vdmUpO1xuICAgICAgICAvLy5wcmV2QWxsKCkubGVuZ3RoIGlzIHVzZWQgdG8gZ2V0IHRoZSBpbmRleFxuICAgICAgICAvL29mIHRoZSBzZWxlY3RlZCBwaWVjZVxuICAgICAgICBjaGVja0tpbmcoJHNlbGVjdGVkUGllY2UsJHBpZWNlVG9Nb3ZlLnByZXZBbGwoKS5sZW5ndGgpO1xuICAgICAgICAvL2RlLXNlbGVjdCB0aGUgcGllY2UgdG8gZW5kIHRoZSBtb3ZlXG4gICAgICAgICRzZWxlY3RlZFBpZWNlLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgIC8vc2V0IHRoZSBuZXcgbGVnYWwgbW92ZXNcbiAgICAgICAgJCgnZGl2LnNxdWFyZScpLnJlbW92ZUNsYXNzKCdtb3ZhYmxlJyk7XG4gICAgICAgIC8vIFRFU1QuIHRlc3RpbmcgdGhlIHdpbm5pbmcgY29uZGl0aW9uc1xuICAgICAgICBwaWVjZXNMZWZ0KCk7XG4gICAgICAgICAgICAvL2luY3JlbWVudCB0aGUgbW92ZSBjb3VudGVyXG4gICAgICAgIGluY3JlbWVudG1vdmVDb3VudGVyKCk7XG4gICAgICAgIC8vcmVzZXQgdGhlIHNxdWFyZXMgdG8gYWxsb3cgbW92ZXNcbiAgICAgICAgcmVzZXRNb3ZhYmxlcygpO1xuXG4gICAgICB9XG5cbiAgICB9XG5cbiAgfSk7XG5cblxuICAvLyBNT1JFIEZVTkNUSU9OU1xuICAvL3RoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgZGF0YSBpdGVtIHdpdGgga2V5ICdqdW1wZWRQaWVjZXMnIGZyb20gZXZlcnkgZGl2LnNxdWFyZVxuLy8gYW5kIHJlbW92ZXMgdGhlIGNsYXNzICdtb3ZhYmxlJyBmcm9tIGV2ZXJ5IHNxdWFyZVxuICBmdW5jdGlvbiByZXNldE1vdmFibGVzKCkge1xuICAgICQoJ2Rpdi5zcXVhcmUnKS5yZW1vdmVEYXRhKCdqdW1wZWRQaWVjZXMnKS5yZW1vdmVDbGFzcygnbW92YWJsZScpO1xuICB9XG5cbi8vIFBsYXllciBjaGFuZ2UgZnJvbSBwbGF5ZXIgMSB0byBwbGF5ZXIgMlxuICAvL3RoaXMgZnVuY3Rpb24gYWxsb3dzIHRoZSBwbGF5ZXJzIHRvIGJlIGNoYW5nZWQuXG4gIGNoYW5nZVBsYXllclR1cm4oKTtcbiAgZnVuY3Rpb24gY2hhbmdlUGxheWVyVHVybigpe1xuICAgIGlmICgkKCdkaXYucGllY2UnKS5oYXNDbGFzcygnc2VsZWN0ZWQnKSl7XG4gICAgICBjb25zb2xlLmxvZygnaGknKTtcbiAgICB9XG4gIH1cblxuICAvL2Z1bmN0aW9uIGZvciB0cmFuc2xhdGluZyBhbiB4LHkgY29vcmRpbmF0ZXMgdG8gYSBwaXhlbCBwb3NpdGlvblxuICAvL3RoZSBjb252ZW50aW9uIGlzIHRoYXQgdGhlIHNxdWFyZSBpbiB0aGUgdXBwZXIgbGVmdCBjb3JuZXIgaXMgYXQgcG9zaXRpb24gMCwwXG4gIC8vdGhlIHNxdWFyZSBpbiB0aGUgdXBwZXIgcmlnaHQsIGF0IDcsMCBhbmQgdGhlIGxvd2VyXG4gIC8vcmlnaHQgYXQgNyw3XG4gIGZ1bmN0aW9uIGdldFBpeGVscyh4LHkpIHtcbiAgICAgIC8vdGFrZXMgYW4geCx5IHBvc2l0aW9uLCByZXR1cm5zXG4gICAgICAvL3BpeGVscyBmcm9tIHRoZSBsZWZ0LCByaWdodFxuICAgIHJldHVybiB7XG4gICAgICAndG9wJzogKHkgKiAod2lkdGgrYm9yZGVyKSkrJ3B4JyxcbiAgICAgICdsZWZ0JzogKHggKiAod2lkdGgrYm9yZGVyKSkrJ3B4J1xuICAgIH07XG4gIH1cblxuICAvL2Z1bmN0aW9uIGZvciB0dXJuaW5nIGEgcGl4ZWwgcG9zaXRpb25cbiAgLy9pbnRvIHRoZSB4LHkgY29vcmRpbmF0ZSBvZiBhIHNxdWFyZSBvbiB0aGUgYm9hcmRcbiAgLy9pdCBmb2xsb3dzIHRoZSBzYW1lIGNvb3JkaW5hdGUgY29udmVudGlvbiBhcyBnZXRQaXhlbHNcbiAgZnVuY3Rpb24gZ2V0Q29vcmRzKHRvcCxsZWZ0KSB7XG4gICAgICAvL3JldHVybnMgYW4geCBhbmQgYSB5XG4gICAgICAvL2dpdmVuIGEgdG9wIGFuZCBsZWZ0IHBpeGVsc1xuICAgIHJldHVybiB7XG4gICAgICAneCc6IGxlZnQgLyAod2lkdGggKyBib3JkZXIpLFxuICAgICAgJ3knOiB0b3AgLyAod2lkdGggKyBib3JkZXIpXG4gICAgfTtcbiAgfVxuXG4gIC8vZnVuY3Rpb24gZm9yIHJldHVybmluZyB0aGUgc2V0IG9mIGxlZ2FsIG1vdmVzIGdpdmVuIGEgcGllY2Vcbi8vIHRoaXMgYWxzbyBzdG9yZXMganVtcGVkIHBpZWNlcyBpbiBhIGRhdGEgZWxlbWVudCBvZiBlYWNoIHNxdWFyZSB0aGF0IGNhbiBiZSBtb3ZlZCB0b1xuICBmdW5jdGlvbiBnZXRNb3ZhYmxlU3F1YXJlcygkcGllY2UpIHtcblxuICAgIC8vc2VsZWN0IGFsbCBvZiB0aGUgc3F1YXJlc1xuICAgIGNvbnN0ICRzcXVhcmVzID0gJCgnZGl2LnNxdWFyZScpO1xuXG4gICAgLy9zZWxlY3QgdGhlIG9jY3VwaWVkIG9uZXMgdXNpbmcgdGhlIGpRdWVyeSBtYXAoKSBtZXRob2RcbiAgICAvL21hcCBjcmVhdGVzIGEgbmV3IG9iamVjdCBmcm9tIGFuIGV4aXN0aW5nIG9uZVxuICAgIC8vdXNpbmcgYSB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICAgIHZhciB0YWtlblNxdWFyZXMgPSB7fTtcbiAgICAkKCdkaXYucGllY2UnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LHBpZWNlKSB7XG5cbiAgICAgICAgICAgIC8vdGhpcyBmdW5jdGlvbiB0cmFuc2xhdGVzIGEgcGllY2VcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gJChwaWVjZSkucG9zaXRpb24oKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IGdldENvb3Jkcyhwb3NpdGlvbi50b3AscG9zaXRpb24ubGVmdCk7XG4gICAgICBjb25zdCBzcXVhcmVJbmRleCA9IGNvb3Jkcy55ICogOCArIGNvb3Jkcy54O1xuICAgICAgdGFrZW5TcXVhcmVzW3NxdWFyZUluZGV4XSA9ICQocGllY2UpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29vcmRzID0gZ2V0Q29vcmRzKCRwaWVjZS5wb3NpdGlvbigpLnRvcCwkcGllY2UucG9zaXRpb24oKS5sZWZ0KTtcblxuICAgIC8vbGlnaHRzIG1vdmUgZG93biB0aGUgYm9hcmRcbiAgICBjb25zdCBsaWdodERpcmVjdGlvbiA9IFtcbiAgICAgICAge3g6IDEseTogMX0sXG4gICAgICAgIHt4OiAtMSx5OiAxfVxuICAgIF07XG4gICAgLy9kYXJrcyBtb3ZlIHVwIHRoZSBib2FyZFxuICAgIGNvbnN0IGRhcmtEaXJlY3Rpb24gPSBbXG4gICAgICAgIHt4OiAxLHk6IC0xfSxcbiAgICAgICAge3g6IC0xLHk6IC0xfVxuICAgIF07XG4gICAgLy9raW5ncyBtb3ZlIGluIGFueSBkaXJlY3Rpb25cbiAgICBjb25zdCBraW5nRGlyZWN0aW9uID0gbGlnaHREaXJlY3Rpb24uY29uY2F0KGRhcmtEaXJlY3Rpb24pO1xuXG4gICAgbGV0IGRpcmVjdGlvbjtcbiAgICBpZiAoJHBpZWNlLmhhc0NsYXNzKCdraW5nJykpIHtcbiAgICAgIGRpcmVjdGlvbiA9IGtpbmdEaXJlY3Rpb247XG4gICAgfSBlbHNlIGlmICgkcGllY2UuaGFzQ2xhc3MoJ2xpZ2h0JykpIHtcbiAgICAgIGRpcmVjdGlvbiA9IGxpZ2h0RGlyZWN0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJlY3Rpb24gPSBkYXJrRGlyZWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IG91dE9mQm91bmRzID0gZnVuY3Rpb24oY29vcmRzKSB7XG4gICAgICByZXR1cm4gIShjb29yZHMueCA+PSAwICYmIGNvb3Jkcy54IDwgOCAmJiBjb29yZHMueSA+PSAwICYmIGNvb3Jkcy55IDwgOCk7XG4gICAgfTtcblxuICAgIGxldCAkbGVnYWxTcXVhcmVzID0gJCgpO1xuICAgIGNvbnN0IGJ1aWxkTW92ZXMgPSBmdW5jdGlvbihjb29yZHMsZGlyZWN0aW9uLGp1bXBzT25seSkge1xuICAgICAgaWYgKG91dE9mQm91bmRzKGNvb3JkcykpIHJldHVybjtcbiAgICAgICAgLy9jdXJyZW50IHNxdWFyZSBpcyBhdCBjb29yZHNcbiAgICAgIGNvbnN0ICRjdXJyZW50U3F1YXJlID0gJHNxdWFyZXMuZXEoY29vcmRzLnkqOCArIGNvb3Jkcy54KTtcbiAgICAgICQuZWFjaChkaXJlY3Rpb24sZnVuY3Rpb24oaW5kZXgsZGlyZWN0aW9uKSB7XG5cbiAgICAgICAgY29uc3QgbmV3Q29vcmRzID0ge1xuICAgICAgICAgIHg6IGRpcmVjdGlvbi54ICsgY29vcmRzLngsXG4gICAgICAgICAgeTogZGlyZWN0aW9uLnkgKyBjb29yZHMueVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvdXRPZkJvdW5kcyhuZXdDb29yZHMpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG5ld1NxdWFyZUluZGV4ID0gOCpuZXdDb29yZHMueSArIG5ld0Nvb3Jkcy54O1xuICAgICAgICAgICAgLy9pZiB0aGUgc3F1YXJlIGlzIHRha2VuLFxuICAgICAgICBpZiAodGFrZW5TcXVhcmVzW25ld1NxdWFyZUluZGV4XSkge1xuXG4gICAgICAgICAgICAgICAgLy9DYW4gb25seSBqdW1wIGlmIHBpZWNlIGlzIGRpZmZlcmVudFxuICAgICAgICAgIGlmICgkcGllY2UuaGFzQ2xhc3MoJ2RhcmsnKSkge1xuICAgICAgICAgICAgaWYgKHRha2VuU3F1YXJlc1tuZXdTcXVhcmVJbmRleF0uaGFzQ2xhc3MoJ2RhcmsnKSkgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGFrZW5TcXVhcmVzW25ld1NxdWFyZUluZGV4XS5oYXNDbGFzcygnbGlnaHQnKSkgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGp1bXBDb29yZHMgPSB7XG4gICAgICAgICAgICB4OiBkaXJlY3Rpb24ueCoyICsgY29vcmRzLngsXG4gICAgICAgICAgICB5OiBkaXJlY3Rpb24ueSoyICsgY29vcmRzLnlcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChvdXRPZkJvdW5kcyhqdW1wQ29vcmRzKSkgcmV0dXJuO1xuXG4gICAgICAgICAgY29uc3QganVtcFNxdWFyZUluZGV4ID0ganVtcENvb3Jkcy55KjggKyBqdW1wQ29vcmRzLng7XG4gICAgICAgICAgICAgICAgLy9pZiB0aGUganVtcCBzcXVhcmUgaXMgZnJlZS4uLlxuICAgICAgICAgICAgICAgIC8vYWRkIGl0IGFuZCB0aGUgZGF0YS1qdW1wZWQtcGllY2VzXG4gICAgICAgICAgaWYgKCF0YWtlblNxdWFyZXNbanVtcFNxdWFyZUluZGV4XSkge1xuICAgICAgICAgICAgY29uc3QgJG5ld1NxdWFyZSA9ICRzcXVhcmVzLmVxKGp1bXBTcXVhcmVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IHNlZW4gaXRcbiAgICAgICAgICAgIGlmICghJG5ld1NxdWFyZS5pcygkbGVnYWxTcXVhcmVzKSkge1xuXG4gICAgICAgICAgICAgIC8vYWRkIHRoZSBwYXNzZWQgb3ZlciBzcXVhcmUgdG8gaXRcbiAgICAgICAgICAgICAgJGxlZ2FsU3F1YXJlcyA9ICRsZWdhbFNxdWFyZXMuYWRkKCRuZXdTcXVhcmUpO1xuXG4gICAgICAgICAgICAgIC8vYW5kIHRoZSBqdW1wZWQgc3F1YXJlcyBmcm9tIGhvdyB3ZSBnb3QgaGVyZVxuICAgICAgICAgICAgICBsZXQgJGp1bXBlZFBpZWNlcyA9IHRha2VuU3F1YXJlc1tuZXdTcXVhcmVJbmRleF07XG4gICAgICAgICAgICAgIGlmICgkY3VycmVudFNxdWFyZS5kYXRhKCdqdW1wZWRQaWVjZXMnKSkge1xuICAgICAgICAgICAgICAgICRqdW1wZWRQaWVjZXMgPSAkanVtcGVkUGllY2VzLmFkZCgkY3VycmVudFNxdWFyZS5kYXRhKCdqdW1wZWRQaWVjZXMnKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJG5ld1NxdWFyZS5kYXRhKCdqdW1wZWRQaWVjZXMnLCRqdW1wZWRQaWVjZXMpO1xuXG4gICAgICAgICAgICAgIC8vYW5kIHJlY3Vyc2UsIHdpdGgganVtcHNPbmx5IHNldCB0byB0cnVlXG4gICAgICAgICAgICAgIGJ1aWxkTW92ZXMoanVtcENvb3JkcyxkaXJlY3Rpb24sdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFqdW1wc09ubHkpIHtcbiAgICAgICAgICBjb25zdCAkbmV3U3F1YXJlID0gJHNxdWFyZXMuZXEobmV3U3F1YXJlSW5kZXgpO1xuICAgICAgICAgICRuZXdTcXVhcmUuZGF0YSgnanVtcGVkUGllY2VzJywkKCkpO1xuICAgICAgICAgICRsZWdhbFNxdWFyZXMgPSAkbGVnYWxTcXVhcmVzLmFkZCgkbmV3U3F1YXJlKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGJ1aWxkTW92ZXMoY29vcmRzLGRpcmVjdGlvbixmYWxzZSk7XG4gICAgcmV0dXJuICRsZWdhbFNxdWFyZXM7XG5cbiAgfS8vZW5kIG9mIGdldE1vdmFibGVTcXVhcmVzXG5cbiAgZnVuY3Rpb24gc2V0VXBQaWVjZXMoKSB7XG4gICAgICAvL3NlbGVjdCBhbGwgdGhlIGRpdnMgd2l0aCBjbGFzcyAncGllY2UnXG4gICAgJCgncGllY2UnKTtcbi8vYWRkIHRoZSAnbGlnaHQnIGNsYXNzIHRvIGhhbGYgb2YgdGhlbVxuICAgICQoJ2Rpdi5waWVjZTpldmVuJykuYWRkQ2xhc3MoJ2xpZ2h0Jyk7XG4vL2pRdWVyeSdzIGV2ZW4gYW5kIG9kZCBzZWxlY3RvciBtZXRob2RzIHRvIGFzc2lnbiB0aGUgY2xhc3NlcyAubGlnaHQgYW5kIC5kYXJrLlxuLy9hZGQgdGhlICdkYXJrJyB0byB0aGUgb3RoZXIgaGFsZlxuICAgICQoJ2Rpdi5waWVjZTpvZGQnKS5hZGRDbGFzcygnZGFyaycpO1xuICB9XG5cbiAgLy9hY3R1YWxseSBtb3ZpbmcgdGhlIHBpZWNlXG4gIGZ1bmN0aW9uIG1vdmVQaWVjZVRvKCRwaWVjZSxuZXdUb3AsbmV3TGVmdCkge1xuICAgICAgLy9zZXQgdGhlIGNzcyAndG9wJyBhbmQgJ2xlZnQnXG4gICAgICAvL2F0dHJpYnV0ZXMgb2YgdGhlIHBhc3NlZCBwaWVjZVxuICAgICAgLy90byB0aGUgYXJndW1lbnRzIG5ld1RvcCBhbmQgbmV3TGVmdFxuICAgICRwaWVjZS5jc3MoJ3RvcCcsIG5ld1RvcCk7XG4gICAgJHBpZWNlLmNzcygnbGVmdCcsIG5ld0xlZnQpO1xuXG4gIH1cblxuICBmdW5jdGlvbiBzZXRVcEJvYXJkKCkge1xuXG4gICAgLy9DcmVhdGluZyB0aGUgNjQgc3F1YXJlcyBhbmQgYWRkaW5nIHRoZW0gdG8gdGhlIERPTVxuICAgIGNvbnN0IHNxdWFyZUNvdW50ID0gOCo4OyAvLzggcm93cyBieSA4IGNvbHVtbnM7IHplcm8gYmFzZWQgaW5kZXhcbiAgICBmb3IgKGxldCBpID0gMDtpPHNxdWFyZUNvdW50O2krKykge1xuICAgIC8vdGhpcyBsaW5lIGNyZWF0ZXMgYSBuZXcgZGl2IHdpdGggdGhlIGNsYXNzICdzcXVhcmUnXG4gICAgLy9hbmQgYXBwZW5kcyBpdCB0byB0aGUgZGl2IHdpdGggaWQgJ2JvYXJkJ1xuICAgICAgJGJvYXJkLmFwcGVuZCgkKCc8ZGl2Lz4nKS5hZGRDbGFzcygnc3F1YXJlJykpO1xuICAgIH1cblxuICAgIC8vY3JlYXRpbmcgdGhlIDI0IHBpZWNlcyBhbmQgYWRkaW5nIHRoZW0gdG8gdGhlIERPTVxuICAgIGNvbnN0IHBpZWNlQ291bnQgPSAyNDtcblxuICAgIGZvciAobGV0IGk9MDtpPHBpZWNlQ291bnQ7aSsrKSB7XG4gICAgICAvL3RoaXMgbGluZSBhcHBlbmRzIGFuIGVtcHR5IGRpdiB3aXRoIHRoZSBjbGFzcyAncGllY2UnIHRvIHRoZSBkaXYgd2l0aCBpZCAncGllY2VzJ1xuICAgICAgJHBpZWNlcy5hcHBlbmQoJCgnPGRpdi8+JykuYWRkQ2xhc3MoJ3BpZWNlJykpO1xuICAgIH1cbiAgICAgIC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCBvZiB0aGUgZGl2cyB3aXRoIGNsYXNzIGBzcXVhcmVgXG4gICAgICAvL2ZpZ3VyZSBvdXQgd2hldGhlciBlYWNoIG9uZSBzaG91bGQgYmVcbiAgICAgIC8vbGlnaHQgb3IgZGFyaywgYW5kIGFzc2lnbiB0aGUgcHJvcGVyIGNsYXNzXG4gICAgY29uc3QgJGVhY2hTcXVhcmUgPSAkKCdkaXYuc3F1YXJlJyk7XG4gICAgJGVhY2hTcXVhcmUuZWFjaChmdW5jdGlvbihpbmRleCl7XG4gICAgICBpZihsaWdodE9yRGFyayhpbmRleCk9PT0gMCl7XG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2xpZ2h0Jyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnZGFyaycpO1xuICAgICAgfVxuICAgIH0pO1xuICAgICAgLy9pbm5lciBoZWxwZXIgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIG51bWJlciBiZXR3ZWVuXG4gICAgICAvLzAgYW5kIDYzIChpbmNsdXNpdmUpIGFuZCByZXR1cm5zIDEgaWYgdGhlIHNxdWFyZSBzaG91bGQgYmVcbiAgICAgIC8vZGFyaywgYW5kIDAgaWYgdGhlIHNxdWFyZSBzaG91bGQgYmUgbGlnaHRcbiAgICBmdW5jdGlvbiBsaWdodE9yRGFyayhpbmRleCkge1xuICAgICAgY29uc3QgeCA9IGluZGV4ICUgODtcbiAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKGluZGV4IC8gOCk7XG4gICAgICBjb25zdCBvZGRYID0geCAlIDI7XG4gICAgICBjb25zdCBvZGRZID0geSAlIDI7XG4gICAgICByZXR1cm4gKG9kZFggXiBvZGRZKTtcbiAgICB9XG5cbiAgfS8vZW5kIG9mIHNldFVwQm9hcmQoKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVNlbGVjdCgkcGllY2UpIHtcbiAgICAgIC8vaWYgJHBpZWNlIGhhcyB0aGUgY2xhc3MgJ3NlbGVjdGVkJyxyZW1vdmUgaXRcbiAgICAgIC8vaWYgJHBpZWNlIGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzICdzZWxlY3RlZCdcbiAgICAgIC8vbWFrZSBzdXJlIG5vIG90aGVyIGRpdnMgd2l0aCB0aGUgY2xhc3MgJ3BpZWNlJ1xuICAgICAgLy9oYXZlIHRoYXQgY2xhc3MsIHRoZW4gc2V0ICRwaWVjZSB0byBoYXZlIHRoZSBjbGFzc1xuICAgIGlmKCRwaWVjZS5oYXNDbGFzcygnc2VsZWN0ZWQnKSlcbiAgICAgICRwaWVjZS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICBlbHNlIHtcbiAgICAgICQoJ2Rpdi5waWVjZScpLmVhY2goZnVuY3Rpb24oaW5kZXgscGllY2UpIHtcbiAgICAgICAgaWYoJChwaWVjZSkuaGFzQ2xhc3MoJ3NlbGVjdGVkJykpXG4gICAgICAgICAgJChwaWVjZSkucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICB9KTtcbiAgICAgICRwaWVjZS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICB9XG5cbiAgfS8vZW5kIG9mIHRvZ2dsZVNlbGVjdCBmdW5jdGlvblxuXG4gIGZ1bmN0aW9uIGluY3JlbWVudG1vdmVDb3VudGVyKCkge1xuICAgICAgLy9nZXRzIHRoZSBodG1sIG9mIHRoZSBzcGFuIHdpdGggaWQgbW92ZUNvdW50ZXIgdHVybnMgaXQgaW50byBhIG51bWJlclxuICAgICAgLy9pbmNyZW1lbnRzIGl0IGJ5IG9uZVxuICAgICAgLy9zZXRzIHRoZSBodG1sIG9mIHRoZSBzcGFuIHdpdGggaWQgbW92ZUNvdW50ZXJcbiAgICAgIC8vdG8gdGhlIG5ldyBtb3ZlIGNvdW50XG4gICAgcmV0dXJuICAkbW92ZUNvdW50ZXIuaHRtbChwYXJzZUludCgkKCcjbW92ZUNvdW50ZXInKS5odG1sKCksMTApKzEpO1xuXG4gIH1cblxuXG4vLyB0aGlzIGZ1bmN0aW9uIGdldHMgdGhlIGpRdWVyeSBvYmplY3Qgc3RvcmVkIGluXG4vLyB0aGUgZGF0YSBvYmplY3Qgb2YgJHNxdWFyZSB1bmRlciB0aGUga2V5ICdqdW1wZWRQaWVjZXMnXG4vLyBhbmQgcmVtb3ZlcyBldmVyeSBlbGVtZW50IGluIHRoYXQgalF1ZXJ5IHNlbGVjdGlvblxuICBmdW5jdGlvbiByZW1vdmVDYXB0dXJlZFBpZWNlcygkc3F1YXJlKSB7XG4gICAgJHNxdWFyZS5kYXRhKCdqdW1wZWRQaWVjZXMnKS5yZW1vdmUoKTtcbiAgfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSAkcGllY2UgYW5kIHRoZSBpbmRleCBvZiBhIHNxdWFyZVxuICAvL3NxdWFyZUluZGV4IHdpbGwgYmUgYmV0d2VlbiAwIC0gNjMgKGluY2x1c2l2ZSkuXG4vLyBpZiB0aGUgaW5kZXggcmVmZXJzIHRvIGFuIGVsZW1lbnQgaW4gdGhlIGZpcnN0IHJvdyBvciBsYXN0IHJvdyxcbi8vIHRoZSBjbGFzcyAna2luZycgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSAkcGllY2VcbiAgZnVuY3Rpb24gY2hlY2tLaW5nKCRwaWVjZSxzcXVhcmVJbmRleCkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKXtcbiAgICAgIGlmIChzcXVhcmVJbmRleCA8IDggfHwgc3F1YXJlSW5kZXggPj0gNTYpe1xuICAgICAgICAkcGllY2UuYWRkQ2xhc3MoJ2tpbmcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuLy93aW5uaW5nIGNvbmRpdGlvbnM6IElmIG9uZSBwbGF5ZXIgb25seSBoYXMgdGhlaXIgcGllY2VzIG9uIHRoZSBib2FyZCBsZWZ0XG4vL3RoZXkgd2luLlxuICBmdW5jdGlvbiBwaWVjZXNMZWZ0KCl7XG4gICAgY29uc3QgJGxpZ2h0UGllY2VzID0gJCgnZGl2LnBpZWNlLmxpZ2h0Jyk7XG4gICAgY29uc3QgJGRhcmtQaWVjZXMgPSAkKCdkaXYucGllY2UuZGFyaycpO1xuICAgIGNvbnN0IGRhcmtQaWVjZXMgPSAkZGFya1BpZWNlcy5sZW5ndGg7XG4gICAgY29uc3QgbGlnaHRQaWVjZXMgPSAkbGlnaHRQaWVjZXMubGVuZ3RoO1xuICAgIGlmIChkYXJrUGllY2VzID09PSAwKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coYFBsYXllciAxIHdpbnNgKTtcbiAgICB9IGVsc2UgaWYobGlnaHRQaWVjZXMgPT09IDApIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhgUGxheWVyIDIgd2luc2ApO1xuICAgIH0gZWxzZSBpZiAobGlnaHRQaWVjZXMgPT09IDEgJiYgZGFya1BpZWNlcyA9PT0gMSl7Ly9hbmQgNDAgbW92ZXMgYXJlIHBsYXllZCBhZnRlcndhcmRzXG4gICAgICAvL3lldCB0byBjb2RlIHRoaXMgZnVuY3Rpb24gXG4gICAgICByZXR1cm4gY29uc29sZS5sb2coYEl0J3MgYSBkcmF3YCk7XG4gICAgfVxuXG4gIH1cblxuICAvL3Jlc2V0dGluZyB0aGUgZ2FtZS5cbiAgJHJlc2V0QnV0dG9uLm9uKCdjbGljaycsICgpPT57XG4gICAgcmVzZXQoKTtcbiAgICAvLyBzZXR0aW5nIHVwIHRoZSBwaWVjZXMgYWZ0ZXIgZW1wdHlpbmcgdGhlbS5cbiAgfSk7XG5cbiAgLy90aGlzIHJlc2V0cyB0aGUgZ2FtZSBieSBlZmZlY3RpdmVseSByZWxvYWRpbmcgdGhlIHBhZ2UgZnJvbSBjYWNoZVxuICBmdW5jdGlvbiByZXNldCgpe1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbn0pOy8vZW5kIG9mIEpTIGxvYWRcblxuXG4vKlxuXG5UT0RPOlxuMS4gUGxheWVyIGNoYW5nZSBmcm9tIHBsYXllciAxIHRvIHBsYXllciAyXG4yLiBSZXNldCB0aGUgZ2FtZSBieSBwdXR0aW5nIHRoZSBwaWVjZXMgdG8gdGhlIG9yaWdpbmFsIHBvc2l0aW9uXG4zLiBXaW4gY29uZGl0aW9ucywgaWYgZWl0aGVyIHBsYXllciBoYXMgcGllY2VzIGxlZnQgb24gdGhlIGJvYXJkIHdoaWxlIHRoZSBvdGhlciBkb2Vzbid0XG4gIHRoZW4gaXQncyBhIHdpbi5cbjQuXG5cblxuVE9ETzpcbjEuIFBsYXllciBjaGFuZ2UgZnJvbSBwbGF5ZXIgMSB0byBwbGF5ZXIgMlxuMi4gRmlndXJlIG91dCBob3cgdG8gc3RvcCBpbGxlZ2FsIG1vdmVzLlxuICAtb25seSBtYWtlIHR3byBwb3N0aXRpb25zIGF2YWlsYWJsZSBhdCBhbnkgZ2l2ZW4gdGltZVxuICAtb25jZSB0aGUgcGllY2UgaGFzIG1vdmVkIGludG8gYSBwb3NpdGlvbiBtYWtlXG4zLiBKdW1wIG1vdmVzIHRvIG1ha2UgdGhlIG9wcG9uZW50cyBwaWVjZSBkaXNhcHBlYXIgZnJvbSB0aGUgYm9hcmQgYW5kIHJlc2V0XG4gIHRoZSBwb3NpdG9uXG40LiBLaW5nIG1ha2VyIGZ1bmN0aW9uXG41LiBIb3cgdG8gdGFrZSBpbiB0aGUgdG9wIHJpZ2h0IHBvc2l0aW9uXG42LlJlc2V0IHRoZSBnYW1lIGJldHRlclxuXG4tT24gY2xpY2sgb2Ygc3FhdXJlXG4tZ2V0IHBpZWNlIG9uIHNxYXVyZSAoZS50YXJnZXQpXG4tY2hlY2sgaWYgcGllY2UgYmVsb25ncyB0byBwMSBvciBwMlxuLWNoZWNrIHJlbGV2YW50IHNxdWFyZXNcbiAgLmlmIGluZGV4IG9mIGN1cnJlbnRTcXVhcmVcbiAgLmlmIHNxdWFyZSBpcyBub3QgaW4gdGhlIGZpcnN0IGNvbHVtblxuICBjaGVjayBzcXVhcmUgZGlhZ29uYWxseSBsZWZ0IGFuZCBtb3ZhYmxlIGNsYXNzIGlmIGVtcHR5XG4gIC5pZiBzcXVhcmUgaXMgbm90IGluIHRoZSBsYXN0IGNvbHVtblxuICBjaGVjayBzcXVhcmUgZGlhZ29uYWxseSByaWdodCBhbmQgbW92YWJsZSBjbGFzcyBpZiBlbXB0eVxuLW9uY2UgcGllY2UgaXMgbW92ZWQgb3IgaWYgdW4tc2VsZWN0ZWQgcmVtb3ZlIG1vdmFibGUgY2xhc3MgZnJvbSBhbGwgc3F1YXJlcy5cblxuaW5kZXggKHBvc2l0aW9uKSUgd2lkdGggPT09IDAgLi4ucmVwcmVzZW50cyB0aGUgZmlyc3QgY29sdW1uXG5pbmRleCAlIHdpZHRoID09PSB3aWR0aC0xIC4uLnJlcHJlc2VudHMgdGhlIGxhc3QgY29sdW1uXG5cbmluZGV4ICsgd2lkdGgtMSBmb3IgcGxheWVyMSBpcyBnb2luZyBsZWZ0IGRpYWdvbmFsbHlcbmluZGV4ICsgd2lkdGgtMSBmb3IgcGxheWVyMSBpcyBnb2luZyByaWdodCBkaWFnb25hbGx5XG5cbmluZGV4IC0gd2lkdGgrMSBmb3IgcGxheWVyMiBpcyBnb2luZyBsZWZ0IGRpYWdvbmFsbHlcbmluZGV4IC0gd2lkdGgtMSBmb3IgcGxheWVyMiBpcyBnb2luZyByaWdodCBkaWFnb25hbGx5XG4vL1xuLy91c2luZyB4IGFuZCB5IHZhbHVlcy5cbi8veCB2YWx1ZSBvbiB0aGUgZmlyc3RDb2x1bW4gd2lsbCBhbHdheXMgYmUgemVybyBzaW5jZSB0aGUgc3RhcnRpbmcgaXMgYSB6ZXJvIGJhc2VkIGluZGV4XG4vL3kgdmFsdWUgb24gdGhlIGxhc3RDb2x1bW4gd2lsbCBhbHdheXMgYmUgc2V2ZW4gc2luY2UgdGhlIGxhc3QgaW5kZXggb24gYSA4KjggaXMgN1xuLy9kYXJrUGllY2UgbW92aW5nIHJpZ2h0IGlzIHggKyAxIGFuZCB5IC0gMVxuLy9kYXJrUGllY2UgbW92aW5nIGxlZnQgaXMgeCAtIDEgYW5kIHkgLSAxXG4vL2xpZ2h0UGllY2UgbW92aW5nIHJpZ2h0IGlzIHggLSAxIGFuZCB5ICsgMVxuLy9saWdodFBpZWNlIG1vdmluZyBsZWZ0IGlzIHggKyAxIGFuZCB5ICsgMVxuLy9BbmQgdG8ganVtcCB3aWxsIGJlICsyIHNpbmdsZSBtb3ZlbWVudHMuXG4vL2NoZWNrIGlmIGVtcHR5Li4uYnkgY2hlY2tpbmcgaWYgYSBzcXVhcmUgaXMgbW92YWJsZSBpLmUuIGdldE1vdmFibGVTcXVhcmVzKCkuYWRkQ2xhc3MoJ21vdmFibGUnKTtcbi8vaWYgZW1wdHlcbi8vIGNvbnN0IGRhcmtQaWVjZU1vdmVSaWdodCA9KGluZGV4LnggKyAoaW5kZXgueCArIDEpKSwgKGluZGV4LnkgKyAoaW5kZXgueSAtIDEpKTsgLy9JIG5lZWQgdG8gZ2V0IGEgc2V0IG9mIGNvb3JkcyBiYWNrIGFuZCBtYWtlIHRoYXQgYSBsZWdhbE1vdmVzXG5cblxuXG5cbi8vIGlmIChpbmRleCAlIHdpZHRoID09PSAwICYmICRkYXJrUGllY2Upe1xuLy8gICBpbmRleCArIHdpZHRoICsgMVxuLy8gfVxuLy8gdGFrZSB0aGUgaW5kZXggeCBhbmQgeSB2YWx1ZSBhcyBpbmRleCBhbmQgY2hlY2tcbi8vaWYgaW5kZXggJSB3aWR0aCA9PT0gMCB0aGUgZmlyc3QgY29sdW1uIG9yXG4vL2lmIGluZGV4ICUgd2lkdGggPT09IHdpZHRoLTEgdGhlIGxhc3QgY29sdW1uXG4vL2lmIGZpcnN0IGNvbHVtbiBpcyB0cnVlIHRoZW4gY2hlY2sgY29sb3IvcDEgb3IgcDJcbi8vcDFcbi8vaWYgcDEgY2hlY2sgc3F1YXJlIGRpYWdvbmFsbHkgbGVmdCBpZiBlbXB0eSB1c2luZ1xuLy9pbmRleCArIHdpZHRoICsgMSBhZGQgdGhlIGNsYXNzICdtb3ZhYmxlJ1xuLy9pZiBsYXN0IGNvbHVtbiBpcyB0cnVlIHRoZW4gY2hlY2sgY29sb3IvcDEgb3IgcDJcbi8vaWYgcDEgY2hlY2sgc3F1YXJlIGRpYWdvbmFsbHkgcmlnaHQgaWYgZW1wdHkgdXNpbmdcbi8vaW5kZXggKyB3aWR0aC0xIGFkZCB0aGUgY2xhc3MgJ21vdmFibGUnXG4vL3VzZSBDU1MgdG8gaGlnaGxpZ2h0IHRoZSBtb3ZhYmxlIHNxdWF1cmVzIChsZWdhbCBtb3Zlcylcbi8vcDJcbi8vZWxzZSBpdCdzIHAyXG5cbiovXG4iXX0=
