"use strict";$(function(){function e(e,a){return{top:a*(t+r)+"px",left:e*(t+r)+"px"}}function a(e,a){return{x:a/(t+r),y:e/(t+r)}}function i(){var e=$("div.square"),i=$("div.piece").map(function(i,t){var r=$(t).position(),o=a(r.top,r.left),n=8*o.y+o.x;return e[n]});return $("div.square.dark").not(i)}var t=46,r=2,o=$("div#board"),n=$("div#pieces");$("document").ready(function(){for(var a=0;a<64;a++)o.append($("<div/>").addClass("square"));for(var t=0;t<24;t++)n.append($("<div/>").addClass("piece"));$("div.piece.light").each(function(a,i){var t=Math.floor(a/4),r=a%4*2+(1-t%2),o=e(r,t);$(i),o.top,o.left}),$("div.piece.dark").each(function(a,i){var t=Math.floor(a/4)+5,r=a%4*2+(1-t%2),o=e(r,t);$(i),o.top,o.left}),i().addClass("movable"),$("div.piece").click(function(){$(this)}),$("div.square").click(function(){var a=$(this);if(a.hasClass("movable")){var t=$("div.piece.selected");if(1===t.length){var r=a.prevAll().length,o=r%8,n=Math.floor(r/8),d=e(o,n);d.top,d.left,t.removeClass("selected"),$("div.square").removeClass("movable"),i().addClass("movable")}}})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
