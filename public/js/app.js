"use strict";$(function(){function e(e,t){this.element=e,this.position=t,this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,t,i){return Math.sqrt(Math.pow(e-s,2)+Math.pow(t-i,2))}function t(e,s){this.element=e,this.position=s,this.player="",this.element<12?this.player1:this.player2}console.log("jQuery is working!");var i=$("#checkers-board"),n=$(".squares"),o=$(".pieces"),l=$(".player1"),a=$(".player2"),c=void 0,r=void 0;$("#checkers-board .pieces .player1 .selected");console.log(i+" ");var p=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],d=[],v=[],h=1,u=2,f=null,g=0,m=0,y=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){f=h;for(var s=0;s<p.length;s++){p[s];for(var i=0;i<p[s].length;i++)p[s][i],s%2==1&&i%2==0?(n.append("<div class='square' id='square"+g+"' style='top:"+y[s]+"; left:"+y[i]+"'></div>"),v[g]=new e($("#squares"+g),[parseInt(s),parseInt(i)]),g++):s%2==0&&i%2==1&&(n.append("<div class='square' id='square"+g+"' style='top:"+y[s]+"; left:"+y[i]+"'></div>"),v[g]=new e($("#square"+g),[parseInt(s),parseInt(i)]),g++),p[s][i]===h?(l.append("<div class='player1-pieces' id='"+m+"' style='top:"+y[s]+"; left:"+y[i]+";'></div>"),d[m]=new t($("#"+m),[parseInt(s),parseInt(i)]),m++):p[s][i]===u&&(a.append("<div class='player2-pieces' id='"+m+"' style='top:"+y[s]+"; left:"+y[i]+";'></div>"),d[m]=new t($("#"+m),[parseInt(s),parseInt(i)]),m++)}}(),c=$(".player1-pieces"),r=$(".player2-pieces"),n.on("click",function(){console.log("click events works on the squares!")}),o.on("click",function(){console.log("click events works on the pieces!"),console.log($(void 0).attr("class"));var e=$(void 0).parent().attr("class");console.log("This is a parent class name: "+e)}),l.on("click",function(){console.log("This is player 1 div and it's been clicked"),console.log($(void 0).attr("id"))}),c.on("click",function(e){c.removeClass("selected"),$(e.target).addClass("selected");var s=$(".player1");s.toggleClass("selected"),console.log("Output of the test : "+s)}),r.on("click",function(){r.toggleClass("selected")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiZGlzdGFuY2UiLCJlbGVtZW50IiwicG9zaXRpb24iLCJ0aGlzIiwiaW5SYW5nZSIsInBpZWNlIiwiTWF0aCIsInNxcnQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvdyIsIiRwaWVjZXMiLCJjb25zb2xlIiwibG9nIiwicGxheWVyMSIsInBsYXllcjIiLCIkY2hlY2tlcnNCb2FyZCIsIiRzcXVhcmVzT25Cb2FyZCIsIiRwbGF5ZXIxIiwiJHBsYXllcjFQaWVjZXMiLCJ1bmRlZmluZWQiLCIkcGxheWVyMlBpZWNlcyIsImNoZWNrZXJzQm9hcmQiLCJwaWVjZXMiLCJzcXVhcmVzIiwiY291bnRTcXVhcmVzIiwicGxheWVyVHVybiIsInZpZXdwb3J0Q29udmVyc2lvbiIsInJvdyIsImNvbHVtbiIsImxlbmd0aCIsImFwcGVuZCIsInNxdWFyZSIsInBhcnNlSW50IiwiY291bnRQaWVjZXMiLCIkcGxheWVyMiIsIm9uIiwiYXR0ciIsInBhcmVudCIsImNsYXNzbiIsImUiLCJyZW1vdmVDbGFzcyIsInRhcmdldCIsImFkZENsYXNzIiwiJHRlc3QiLCJ0b2dnbGVDbGFzcyJdLCJtYXBwaW5ncyI6IllBQ0FBLEdBQUUsV0F3SkksUUFBR0MsR0FBU0MsRUFBS0MsR0FJaEJDLEtBSkRGLFFBSVVELEVBR1JHLEtBQUFELFNBQU9BLEVBUlhDLEtBQUtDLFFBQVUsU0FBU0MsR0FhMUIsTUFBQUwsR0FBQUcsS0FBQUQsU0FBQSxHQUFBQyxLQUFBRCxTQUFBLEdBQUFHLEVBQUFILFNBQUEsR0FDQUcsRUFBQUgsU0FBQSxNQUFBSSxLQUFBQyxLQUFBLEdBRVNQLGNBQ0tPLEVBQUtELEtBQVVFLFNBQU8sR0FBakJMLEtBQXFCRyxTQUFVRyxHQUNqREosRUFBQUgsU0FBQSxHQUFBRyxFQUFBSCxTQUFBLE1BQUEsRUFBQUksS0FBQUMsS0FBQSxHQUVELGdCQUhTRCxJQVdQLFFBQUFOLEdBQUFRLEVBQUFFLEVBQUFELEVBQUFFLEdBQ0EsTUFB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QixNQUFBQSxJQUFRd0MsS0FBSyxTQW9CM0JsQixJQUFBQSxHQUFBdEIsTUFBQUEsSUFBQXlDLFNBQTJCRCxLQUFBLFFBQ3pCbEIsU0FBQUEsSUFBQUEsZ0NBQUFvQixLQU9BckIsRUFBQWtCLEdBQUEsUUFBQSxXQUNBeEIsUUFBQUMsSUFBQSw4Q0FURkQsUUFBQUMsSUFBQWhCLE1BQUFBLElBQUF3QyxLQUFBLFNBQUFsQixFQUFlaUIsR0FBRyxRQUFTLFNBQUNJLEdBQzFCckIsRUFBZXNCLFlBQVksWUFDM0I1QyxFQUFFMkMsRUFBRUUsUUFBUUMsU0FBUyxXQUNyQixJQUFNQyxHQUFRL0MsRUFBRSxXQUNoQitDLEdBQU1DLFlBQVksWUFDbEJqQyxRQUFRQyxJQUFSLHdCQUFvQytCLEtBUXRDdkIsRUFBZWUsR0FBRyxRQUFTLFdBQ3pCZixFQUFld0IsWUFBWSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsb2FkIGpRdWVyeVxuJCgoKT0+e1xuLy8gVEVTVCBqUXVlcnkgaXMgd29ya2luZ1xuICBjb25zb2xlLmxvZyhgalF1ZXJ5IGlzIHdvcmtpbmchYCk7Ly9wYXNzZWQuIG91dHB1dCBpcyBqUXVlcnkgaXMgd29ya2luZyFcblxuXG4vL2dyYWIgRE9NIGVsZW1lbnRzXG4gIGNvbnN0ICRjaGVja2Vyc0JvYXJkID0gJCgnI2NoZWNrZXJzLWJvYXJkJyk7XG4gIGNvbnN0ICRzcXVhcmVzT25Cb2FyZCA9ICQoJy5zcXVhcmVzJyk7XG4gIGNvbnN0ICRwaWVjZXMgPSAkKCcucGllY2VzJyk7XG4gIC8vcGxheWVyMSBwaWVjZSBjbGFzc1xuICBjb25zdCAkcGxheWVyMSA9JCgnLnBsYXllcjEnKTtcbiAgLy9wbGF5ZXIyIHBpZWNlIGNsYXNzXG4gIGNvbnN0ICRwbGF5ZXIyID0kKCcucGxheWVyMicpO1xuICBsZXQgJHBsYXllcjFQaWVjZXMgPSB1bmRlZmluZWQ7Ly9ub3QgeWV0IGdlbmVyYXRlZFxuICAvL3BsYXllcjIgcGllY2VzXG4gIGxldCAkcGxheWVyMlBpZWNlcyA9IHVuZGVmaW5lZDsvL25vdCB5ZXQgZ2VuZXJhdGVkXG4gIC8vdGhlIHNlbGVjdGVkIGNsYXNzXG4gIGNvbnN0ICRzZWxlY3RlZCA9JCgnI2NoZWNrZXJzLWJvYXJkIC5waWVjZXMgLnBsYXllcjEgLnNlbGVjdGVkJyk7Ly9pcyB0aGlzIGEgZG9tIGVsZW1lbnQ/XG5cblxuLy9URVNUIGRvbSBlbGVtZW50cyBhcmUgd29ya2luZ1xuICBjb25zb2xlLmxvZyhgJHskY2hlY2tlcnNCb2FyZH0gYCk7Ly9vdXRwdXQgaXMgb2JqZWN0IE9iamVjdFxuXG5cbi8vc2V0dXAgR0xPQkFMIFZBUklBQkxFU1xuLy9ib2FyZCBhcnJheSB3aXRoIHJvd3MgYW5kIGNvbHVtbnMgdG8gc2ltdWxhdGUgdGhlIHJlYWwgd29ybGQgOHg4IGJvYXJkXG4gIGNvbnN0IGNoZWNrZXJzQm9hcmQgPSBbXG4gICAgWyAgMCwgIDEsICAwLCAgMSwgIDAsICAxLCAgMCwgIDEgXSxcbiAgICBbICAxLCAgMCwgIDEsICAwLCAgMSwgIDAsICAxLCAgMCBdLFxuICAgIFsgIDAsICAxLCAgMCwgIDEsICAwLCAgMSwgIDAsICAxIF0sXG4gICAgWyAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAgXSxcbiAgICBbICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCBdLFxuICAgIFsgIDIsICAwLCAgMiwgIDAsICAyLCAgMCwgIDIsICAwIF0sXG4gICAgWyAgMCwgIDIsICAwLCAgMiwgIDAsICAyLCAgMCwgIDIgXSxcbiAgICBbICAyLCAgMCwgIDIsICAwLCAgMiwgIDAsICAyLCAgMCBdXG4gIF07XG5cbi8vaW5jcmVtZW50YWwgYXJyYXlzXG4gIGNvbnN0IHBpZWNlcyA9IFtdO1xuICBjb25zdCBzcXVhcmVzID0gW107XG4vL3BsYXllcnNcbiAgY29uc3QgcGxheWVyMSA9IDE7XG4gIGNvbnN0IHBsYXllcjIgPSAyO1xuLy9wbGF5ZXJzIHR1cm5cbiAgbGV0IHBsYXllclR1cm4gPSBudWxsO1xuLy9jb3VudGVyc1xuICBsZXQgY291bnRTcXVhcmVzID0gMDtcbiAgbGV0IGNvdW50UGllY2VzID0gMDtcbi8vYXJyYXkgd2l0aCB2aWV3IHBvcnQgY29udmVyc2lvbiB3aXRoIHRvcCBhbmQgbGVmdFxuLy9WaWV3cG9ydCBNaW5pbXVtICh2bWluKSDigJQgVGhpcyB1bml0IGlzIGJhc2VkIG9uXG4vL3RoZSBzbWFsbGVyIGRpbWVuc2lvbiBvZiB0aGUgdmlld3BvcnQuXG4vL0lmIHRoZSB2aWV3cG9ydCBoZWlnaHQgaXMgc21hbGxlciB0aGFuIHRoZSB3aWR0aCxcbi8vdGhlIHZhbHVlIG9mIDF2bWluIHdpbGwgYmUgZXF1YWwgdG8gMSUgb2YgdGhlIHZpZXdwb3J0IGhlaWdodC5cbi8vU2ltaWxhcmx5LCBpZiB0aGUgdmlld3BvcnQgd2lkdGggaXMgc21hbGxlciB0aGFuIHRoZSBoZWlnaHQsIHRoZSB2YWx1ZSBvZiAxdm1pbiB3aWxsIGJlIGVxdWFsIHRvIDElIG9mIHRoZSB2aWV3cG9ydCB3aWR0aC5cbiAgY29uc3Qgdmlld3BvcnRDb252ZXJzaW9uID0gWycwdm1pbicsJzEwdm1pbicsJzIwdm1pbicsJzMwdm1pbicsJzQwdm1pbicsJzUwdm1pbicsJzYwdm1pbicsJzcwdm1pbiddO1xuXG4gIC8vY2FsbCB0aGUgU0VUVVAgZnVuY3Rpb24vbWV0aG9kIHRvIGNyZWF0ZSB0aGUgYm9hcmQgYW5kIGFkZCBwaWVjZXNcbiAgc2V0dXAoKTtcblxuICBmdW5jdGlvbiBzZXR1cCgpe1xuICAgIC8vcGxheWVyIDEgYWx3YXlzIHN0YXJ0c1xuICAgIHBsYXllclR1cm4gPSBwbGF5ZXIxO1xuICAgIC8vbG9vcCB0aHJvdWdoIHRoZSBhcnJheSBjYWxsZWQgY2hlY2tlcnNCb2FyZCBpbmRleGVkIGF0IDBcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBjaGVja2Vyc0JvYXJkLmxlbmd0aDsgcm93KyspIHtcbiAgICAgIGNoZWNrZXJzQm9hcmRbcm93XTtcbiAgICAgICAgLy9URVNUIHRoZSByb3dzIGluZGV4IGlzIHdvcmtpbmdcbiAgICAgICAgLy8gY29uc29sZS5sb2cocm93KTsvL3Bhc3NlZC4gb3V0cHV0IGlzIDAsMSwyLDMsNCw2LDdcbiAgICAgICAgLy9sb29wIHRocm91Z2ggdGhlIGFycmF5IGVsZW1lbnRzIG9yIGNvbHVtbnNcblxuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgY2hlY2tlcnNCb2FyZFtyb3ddLmxlbmd0aDsgY29sdW1uKyspIHtcbiAgICAgICAgY2hlY2tlcnNCb2FyZFtyb3ddW2NvbHVtbl07XG4gICAgICAgIC8vVEVTVCB0aGUgY29sdW1uIGluZGV4IGlzIGJlaW5nIGxvb3BlZCB0aHJvdWdoXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coY29sdW1uKTsvL3Bhc3NlZC4gb3V0cHV0IGlzIDAsMSwyLDMsNCw2LDcgZm9yZWFjaCBjb2x1bW5cblxuICAgICAgICAvL2lmIHRoZSByb3cgaXMgb2RkIGFuZCB0aGUgY29sdW1uIGV2ZW4gYWRkIGEgc3F1YXJlXG4gICAgICAgIGlmKHJvdyAlIDIgPT09IDEgJiYgY29sdW1uICUgMiA9PT0gMCApe1xuICAgICAgICAgICAgLy9URVNUIHRoZSByb3cgaXMgY29ycmVjdC1vZGRcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJvdyk7Ly9wYXNzLiBvdXRwdXQgaXMgMSwzLDUsN1xuICAgICAgICAgICAgICAvL1RFU1QgdGhlIGNvbHVtbiBpcyBjb3JyZWN0LWV2ZW5cbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY29sdW1uKTsvL3Bhc3NlZC4gb3V0cHV0IGlzIDAsMiw0LDZcbiAgICAgICAgICAgICAgLy9hcHBlbmQgYSBkaXYgcmVwcmVzZW50aW5nIGEgc3F1YXJlIHRvIHRoZSAkc3F1YXJlc09uQm9hcmQgZGl2IHdpdGggY2xhc3NcbiAgICAgICAgICAkc3F1YXJlc09uQm9hcmQuYXBwZW5kKGA8ZGl2IGNsYXNzPSdzcXVhcmUnIGlkPSdzcXVhcmUke2NvdW50U3F1YXJlc30nIHN0eWxlPSd0b3A6JHt2aWV3cG9ydENvbnZlcnNpb25bcm93XX07IGxlZnQ6JHt2aWV3cG9ydENvbnZlcnNpb25bY29sdW1uXX0nPjwvZGl2PmApO1xuICAgICAgICAgICAgICAvL2NyZWF0ZSBhIG5ldyBzcXVhcmVPYmplY3QgYW5kIGFkZCB0aGUgbnVtYmVyIG9mIHNxdWFyZXMgY291bnQgdG8gdGhlIHNxdWFyZXMgY291bnRlcnNcbiAgICAgICAgICAgICAgLy91c2UgdGhlIGVsZW1lbnQgaWQgYW5kIHBvc2l0aW9uIGFzIGFyZ3VtZW50cyB0byBjcmVhdGUgdGhlIHNxdWFyZXNcbiAgICAgICAgICBzcXVhcmVzW2NvdW50U3F1YXJlc10gPSBuZXcgc3F1YXJlKCQoJyNzcXVhcmVzJytjb3VudFNxdWFyZXMpLCBbcGFyc2VJbnQocm93KSwgcGFyc2VJbnQoY29sdW1uKV0pO1xuICAgICAgICAgIGNvdW50U3F1YXJlcysrO1xuICAgICAgICAgICAgICAvLyAvL1RFU1QgdGhlIGNvdW50U3F1YXJlcyB3b3Jrc1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb3VudFNxdWFyZXMpOy8vcGFzc2VkLiBvdXRwdXQgaXMgMSB0byAxNiBpbmRleCBiYXNlZCBpcyAwIHRvIDE1XG4gICAgICAgIH1lbHNlIGlmKHJvdyAlIDIgPT09IDAgJiYgY29sdW1uICUgMiA9PT0gMSkgey8vb3RoZXJ3aXNlIGlmIHJvdyBpcyBldmVuLlxuICAgICAgICAgICAgLy9URVNUIHRoZSBjb2x1bW4gaXMgY29ycmVjdC1vZGRcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbik7Ly9wYXNzZWQuIG91dHB1dCBpcyAxLDMsNSw3XG4gICAgICAgICAgJHNxdWFyZXNPbkJvYXJkLmFwcGVuZChgPGRpdiBjbGFzcz0nc3F1YXJlJyBpZD0nc3F1YXJlJHtjb3VudFNxdWFyZXN9JyBzdHlsZT0ndG9wOiR7dmlld3BvcnRDb252ZXJzaW9uW3Jvd119OyBsZWZ0OiR7dmlld3BvcnRDb252ZXJzaW9uW2NvbHVtbl19Jz48L2Rpdj5gKTtcbiAgICAgICAgICBzcXVhcmVzW2NvdW50U3F1YXJlc10gPSBuZXcgc3F1YXJlKCQoJyNzcXVhcmUnK2NvdW50U3F1YXJlcyksIFtwYXJzZUludChyb3cpLCBwYXJzZUludChjb2x1bW4pXSk7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBpZD0nc3F1YXJlJHtjb3VudFNxdWFyZXN9YCk7XG4gICAgICAgICAgY291bnRTcXVhcmVzKys7XG5cbiAgICAgICAgfS8vZW5kIG9mIGVsc2Ugc3RhdGVtZW50XG5cbiAgICAgICAgICAgIC8vYWRkIHRoZSBwaWVjZXMgdG8gdGhlIGNoZWNrZXJzQm9hcmRcbiAgICAgICAgaWYoY2hlY2tlcnNCb2FyZFtyb3ddW2NvbHVtbl0gPT09IHBsYXllcjEpIHtcbiAgICAgICAgICAkcGxheWVyMS5hcHBlbmQoYDxkaXYgY2xhc3M9J3BsYXllcjEtcGllY2VzJyBpZD0nJHtjb3VudFBpZWNlc30nIHN0eWxlPSd0b3A6JHt2aWV3cG9ydENvbnZlcnNpb25bcm93XX07IGxlZnQ6JHt2aWV3cG9ydENvbnZlcnNpb25bY29sdW1uXX07Jz48L2Rpdj5gKTtcbiAgICAgICAgICBwaWVjZXNbY291bnRQaWVjZXNdID0gbmV3IHBpZWNlKCQoJyMnK2NvdW50UGllY2VzKSwgW3BhcnNlSW50KHJvdyksIHBhcnNlSW50KGNvbHVtbildKTtcbiAgICAgICAgICBjb3VudFBpZWNlcysrO1xuICAgICAgICAgICAgLy9URVNUIHZhbHVlIG9mIGNoZWNrZXJzQm9hcmRbcm93XVtjb2x1bW5dXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgcm93IGlzOiAke2NoZWNrZXJzQm9hcmRbcm93XX0gYCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgY29sdW1uIGlzOiAke2NoZWNrZXJzQm9hcmRbY29sdW1uXX0gYCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgcm93IGFuZCBjb2x1bW4gaXM6ICR7Y2hlY2tlcnNCb2FyZFtyb3ddW2NvbHVtbl19YCk7Ly9wYXNzZWQub3V0cHV0IGlzIDFcbiAgICAgICAgfWVsc2UgaWYoY2hlY2tlcnNCb2FyZFtyb3ddW2NvbHVtbl0gPT09IHBsYXllcjIpIHtcbiAgICAgICAgICAkcGxheWVyMi5hcHBlbmQoYDxkaXYgY2xhc3M9J3BsYXllcjItcGllY2VzJyBpZD0nJHtjb3VudFBpZWNlc30nIHN0eWxlPSd0b3A6JHt2aWV3cG9ydENvbnZlcnNpb25bcm93XX07IGxlZnQ6JHt2aWV3cG9ydENvbnZlcnNpb25bY29sdW1uXX07Jz48L2Rpdj5gKTtcbiAgICAgICAgICBwaWVjZXNbY291bnRQaWVjZXNdID0gbmV3IHBpZWNlKCQoJyMnK2NvdW50UGllY2VzKSwgW3BhcnNlSW50KHJvdyksIHBhcnNlSW50KGNvbHVtbildKTtcbiAgICAgICAgICBjb3VudFBpZWNlcysrO1xuICAgICAgICAgICAgLy9URVNUIHZhbHVlIG9mIGNoZWNrZXJzQm9hcmRbcm93XVtjb2x1bW5dXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgcm93IGlzOiAke2NoZWNrZXJzQm9hcmRbcm93XX0gYCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgY29sdW1uIGlzOiAke2NoZWNrZXJzQm9hcmRbY29sdW1uXX0gYCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYGNoZWNrZXJzQm9hcmQgMiByb3cgYW5kIGNvbHVtbiBpczogJHtjaGVja2Vyc0JvYXJkW3Jvd11bY29sdW1uXX1gKTsvL3Bhc3NlZC4gb3V0cHV0IGlzIDJcbiAgICAgICAgfVxuXG4gICAgICB9Ly9lbmQgb2YgaW5uZXIgZm9yIGxvb3BcbiAgICB9Ly9lbmQgb2Ygb3V0dGVyIGZvciBsb29wXG4gIH0vL2VuZCBvZiBzZXR1cCBmdW5jdGlvblxuXG4gIC8vcGxheWVyMSBwaWVjZXMgZ3JhYmJpbmcgdGhlc2UgaGVyZSBhZnRlciB0aGV5J3ZlIGJlZW4gZ2VuZXJhdGVkIGRlY2xhcmUgYXQgdGhlIHRvcC5cbiAgJHBsYXllcjFQaWVjZXMgPSQoJy5wbGF5ZXIxLXBpZWNlcycpO1xuICAvL3BsYXllcjIgcGllY2VzXG4gICRwbGF5ZXIyUGllY2VzID0kKCcucGxheWVyMi1waWVjZXMnKTtcblxuICAvL1NRVUFSRSBpcyBlbXB0eVxuICBmdW5jdGlvbiBzcXVhcmVJc0VtcHR5KHJvdywgY29sdW1uKXtcbiAgICAvL1RFU1Qgcm93IGFuZCBjb2x1bW5cbiAgICB0aGlzLnJvdyA9IHJvdztcbiAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICBjb25zb2xlLmxvZyhgdmFsdWUgb2Ygcm93OiR7cm93fSBhbmQgdmFsdWUgb2YgY29sdW1uOiAke2NvbHVtbn1gKTtcbiAgICAvL3VzaW5nIGEgdGVuYXJ5IG9wZXJhdG9yIChhbiBvcGVyYXRvciBhY2NlcHRpbmcgMyBvcGVyYW5kcylhcyBzaG9ydGhhbmRcbiAgICAvL3RvIGlmIGVsc2UgY2hlY2sgaWYgdGhlcmUncyBhbiBvYmplY3RcbiAgICAvL29uIHRoZSByb3cgYW5kIGNvbHVtbiAoc3F1YXJlKVxuICAgIGNoZWNrZXJzQm9hcmRbcm93XVtjb2x1bW5dID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cblxuXG4vL1NRVUFSRVxuIC8vY3JlYXRlIGEgc3F1YXJlIG9iamVjdCB0byBhdHRhY2ggdG8gdGhlIGNoZWNrZXJzQm9hcmRcbiAgZnVuY3Rpb24gc3F1YXJlIChlbGVtZW50LCBwb3NpdGlvbikge1xuICAgIC8vdXNpbmcgdGhpcyB0byBnaXZlIGxvY2FsIHZhcmlhYmxlcyBhIGNvbnRleHRcbiAgICAvL2VsZW1lbnQgaXMgdGhlIHRoZSBkaXYgbGlua2VkIHRvIHRoZSBET01cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIC8vIHRoZSBwb3NpdGlvbnMgYXJlIHJlcHJlc2VudGVkIGJ5IHRoZSBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIHJvdyBhbmQgY29sdW1uIGZvcm1hdFxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAvL1RFU1QgdGhlIHNxdWFyZSBwb3NpdGlvblxuICAgIC8vIGNvbnNvbGUubG9nKGBUaGlzIHNxdWFyZXMnIHBvc2l0aW9uIGlzOiAke3Bvc2l0aW9ufWApO1xuICAgIC8vaWYgc3F1YXJlIGlzIGluIHJhbmdlIGZyb20gdGhlIHBpZWNlXG4gICAgdGhpcy5pblJhbmdlID0gZnVuY3Rpb24ocGllY2UpIHtcbiAgICAgIGlmKGRpc3RhbmNlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0sIHBpZWNlLnBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgICAgICAgcGllY2UucG9zaXRpb25bMV0pID09PSBNYXRoLnNxcnQoMikpIHtcbiAgICAgIC8vbm9ybWFsLW1vdmVcbiAgICAgICAgcmV0dXJuICdub3JtYWwtbW92ZSc7XG4gICAgICB9IGVsc2UgaWYoZGlzdGFuY2UodGhpcy5wb3NpdGlvblswXSwgdGhpcy5wb3NpdGlvblsxXSxcbiAgICAgICAgICAgICAgICAgIHBpZWNlLnBvc2l0aW9uWzBdLCBwaWVjZS5wb3NpdGlvblsxXSkgPT09IDIgKiBNYXRoLnNxcnQoMikpIHtcbiAgICAgIC8vanVtcC1tb3ZlXG4gICAgICAgIHJldHVybiAnanVtcC1tb3ZlJztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy9ESVNUQU5DRVxuICAvLyBXZSB1c2UgdGhlIFB5dGhhZ29yYXMgVGhlb3JlbSB0byBkZXJpdmUgYSBmb3JtdWxhIGZvclxuICAvLyBmaW5kaW5nIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgaW4gMi0gYW5kIDMtIGRpbWVuc2lvbmFsIHNwYWNlLlxuICBmdW5jdGlvbiBkaXN0YW5jZSh4MSx4Mix5MSx5Mil7XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdygoeDEteDIpLDIpKyBNYXRoLnBvdygoeTEteTIpLDIpKTtcbiAgfVxuXG4gIC8vUElFQ0VTXG4gIGZ1bmN0aW9uIHBpZWNlIChlbGVtZW50LCBwb3NpdGlvbikge1xuICAgIC8vdXNpbmcgdGhpcyB0byBnaXZlIGxvY2FsIHZhcnMgYSBjb250ZXh0XG4gICAgLy9lbGVtZW50IGlzIHRoZSB0aGUgZGl2IGxpbmtlZCB0byB0aGUgRE9NXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmVsZW1lbnQpO1xuICAgIC8vcG9zaXRpb25zIG9uIGdhbWVCb2FyZCBhcnJheSBpbiBmb3JtYXQgcm93LCBjb2x1bW5cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgLy9URVNUIHRoZSBwb3NpdGlvblxuICAgIC8vIGNvbnNvbGUubG9nKGBUaGUgcGllY2UgcG9zaXRpb24gaXM6ICR7cG9zaXRpb259YCk7XG5cbiAgICAvL3dobydzIHBpZWNlIGlzIGl0LCBwbGF5ZXIgcGxhY2UgaG9sZGVyXG4gICAgdGhpcy5wbGF5ZXIgPSAnJztcbiAgICAvL2ZpZ3VyZSBvdXQgcGxheWVyIGJ5IHBpZWNlIGlkXG4gICAgaWYodGhpcy5lbGVtZW50IDwgMTIpXG4gICAgICB0aGlzLnBsYXllcjE7XG4gICAgZWxzZVxuICAgICAgdGhpcy5wbGF5ZXIyO1xuICB9XG5cbiAgLy8gQ0xJQ0sgRVZFTlRTXG4gICRzcXVhcmVzT25Cb2FyZC5vbignY2xpY2snLCgpPT57XG4gICAgLy9URVNUIHRoZSBjbGljayBldmVudCB3b3Jrcy5cbiAgICBjb25zb2xlLmxvZyhgY2xpY2sgZXZlbnRzIHdvcmtzIG9uIHRoZSBzcXVhcmVzIWApO1xuICB9KTtcblxuICAvL1NFTEVDVElORyBQSUVDRVNcbiAgJHBpZWNlcy5vbignY2xpY2snLCgpPT57XG4gICAgLy9URVNUIHRoZSBjbGljayBldmVudCB3b3Jrcy5cbiAgICBjb25zb2xlLmxvZyhgY2xpY2sgZXZlbnRzIHdvcmtzIG9uIHRoZSBwaWVjZXMhYCk7XG4gICAgLy8gJHBsYXllcjJQaWVjZXMudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgLy9URVNUIHRvIHNlZSB0aGUgaWQgb24gdGhlIHBpZWNlcywgd2lsbCB1c2UgdGhpcyB0byBzZWxlY3QgZWFjaCBvbmUuXG4gICAgLy8gY29uc29sZS5sb2coJHBsYXllcjFQaWVjZXMpO1xuICAgIGNvbnNvbGUubG9nKCQodGhpcykuYXR0cignY2xhc3MnKSk7Ly9waWVjZXMgZGl2IGhhcyBubyBpZCB0aGVyZWZvcmUgcmV0dXJucyB1bmRlZmluZWRcbiAgICBjb25zdCBjbGFzc24gPSAkKHRoaXMpLnBhcmVudCgpLmF0dHIoJ2NsYXNzJyk7XG4gICAgY29uc29sZS5sb2coYFRoaXMgaXMgYSBwYXJlbnQgY2xhc3MgbmFtZTogJHtjbGFzc259YCk7XG4gICAgLy8gY29uc29sZS5sb2coYFRoaXMgaXMgYSBjbGFzcyBuYW1lOiAke2NsYXNzbn1gKTtcblxuICB9KTtcblxuICAvLyBmaWd1cmluZyBvdXQgaG93IHRvIGdyYWIgc2luZ2xlIHBpZWNlXG4gIC8vVEVTVCBmb3IgZ3JhYmJpbmcgaWQnc1xuICAkcGxheWVyMS5vbignY2xpY2snLCgpPT57XG4gICAgY29uc29sZS5sb2coYFRoaXMgaXMgcGxheWVyIDEgZGl2IGFuZCBpdCdzIGJlZW4gY2xpY2tlZGApO1xuXG4gICAgY29uc29sZS5sb2coJCh0aGlzKS5hdHRyKCdpZCcpKTsvL2lkIG9mIHRoZSBjdXJyZW50IGRpdi4ub3V0cHV0IGlzIHVuZGVmaW5lZFxuICAgIC8vIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LmlkO1xuICAgIC8vIGNvbnNvbGUubG9nKGlkKTtcblxuICB9KTtcblxuXG5cbiAgJHBsYXllcjFQaWVjZXMub24oJ2NsaWNrJywgKGUpPT4ge1xuICAgICRwbGF5ZXIxUGllY2VzLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICQoZS50YXJnZXQpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgIGNvbnN0ICR0ZXN0ID0gJCgnLnBsYXllcjEnKTtcbiAgICAkdGVzdC50b2dnbGVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICBjb25zb2xlLmxvZyhgT3V0cHV0IG9mIHRoZSB0ZXN0IDogJHskdGVzdH1gKTtcblxuICAgIC8vICRwbGF5ZXIxUGllY2VzLnRvZ2dsZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgIC8vIGNvbnN0IGlkID0gJChldmVudC50YXJnZXQpOy8vdXNpbmcgZXZlbnQudGFyZ2V0ICB0byBnZXQgdGhlIGNoaWxkIGlkLlxuICAgIC8vIGNvbnNvbGUubG9nKGlkLmF0dHIoJ2lkJykpOy8vcGFzc2VkLiBvdXRwdXRzIHRoZSBkaXYgaWQgb2YgdGhlIHNlbGVjdGVkIHBpZWNlXG4gICAgLy8gY29uc29sZS5sb2coJCh0aGlzKS5hdHRyKCdpZCcpKTsvLyRwbGF5ZXIxUGllY2VzIGRpdiBoYXMgbm8gaWQgdGhlcmVmb3JlIHJldHVybnMgdW5kZWZpbmVkXG4gIH0pO1xuXG4gICRwbGF5ZXIyUGllY2VzLm9uKCdjbGljaycsICgpPT57XG4gICAgJHBsYXllcjJQaWVjZXMudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gIH0pO1xuXG59KTsvL2VuZCBvZiBqUXVlcnkgbG9hZFxuIl19
