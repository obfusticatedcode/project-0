"use strict";$(function(){function e(e,i){this.element=e,this.position=i,console.log("This squares' position is: "+i),this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,i,o){return Math.sqrt(Math.pow(e-s,2)+Math.pow(i-o,2))}function i(e,s){this.element=e,console.log(this.element),this.position=s,console.log("The piece position is: "+s),this.player="",this.element<12?this.player1:this.player2}console.log("jQuery is working!");var o=$("#checkers-board"),n=$(".squares"),t=$(".pieces"),l=$("#player1"),p=$("#player2"),c=void 0,r=void 0;$("#checkers-board .pieces .player1 .selected");console.log(o+" ");var a=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],h=[],v=[],d=1,u=2,g=0,f=0,m=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){for(var s=0;s<a.length;s++){a[s];for(var o=0;o<a[s].length;o++)a[s][o],s%2==1&&o%2==0?(n.append("<div class='square' id='square"+g+"' style='top:"+m[s]+"; left:"+m[o]+"'></div>"),v[g]=new e($("#squares"+g),[parseInt(s),parseInt(o)]),g++):s%2==0&&o%2==1&&(n.append("<div class='square' id='square"+g+"' style='top:"+m[s]+"; left:"+m[o]+"'></div>"),v[g]=new e($("#square"+g),[parseInt(s),parseInt(o)]),g++),a[s][o]===d?(l.append("<div class='player1-pieces' id='"+f+"' style='top:"+m[s]+"; left:"+m[o]+";'></div>"),h[f]=new i($("#"+f),[parseInt(s),parseInt(o)]),f++):a[s][o]===u&&(p.append("<div class='player2-pieces' id='"+f+"' style='top:"+m[s]+"; left:"+m[o]+";'></div>"),h[f]=new i($("#"+f),[parseInt(s),parseInt(o)]),f++)}}(),c=$(".player1-pieces"),r=$(".player2-pieces"),n.on("click",function(){console.log("click events works on the squares!")}),t.on("click",function(){console.log("click events works on the pieces!"),console.log(c)}),c.on("click",function(){console.log("clicking player1 pieces works!"),c.toggleClass("selected")}),r.on("click",function(){r.toggleClass("selected")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
