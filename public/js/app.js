"use strict";$(function(){function e(){var e=$(event.target).position();return p=i(e.top,e.left)}function a(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function t(e,a){return{top:a*(c+l)+"px",left:e*(c+l)+"px"}}function i(e,a){return{x:a/(c+l),y:e/(c+l)}}function s(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var s=$(a).position(),n=i(s.top,s.left),o=8*n.y+n.x;t[o]=$(a)});var s=i(e.position().top,e.position().left),n=[{x:1,y:1},{x:-1,y:1}],o=[{x:1,y:-1},{x:-1,y:-1}],r=n.concat(o),d=void 0;d=e.hasClass("king")?r:e.hasClass("light")?n:o;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},l=$();return function i(s,n,o){if(!c(s)){var r=a.eq(8*s.y+s.x);$.each(n,function(d,v){var f={x:v.x+s.x,y:v.y+s.y};if(!c(f)){var u=8*f.y+f.x;if(t[u]){if(e.hasClass("dark")){if(t[u].hasClass("dark"))return}else if(t[u].hasClass("light"))return;var p={x:2*v.x+s.x,y:2*v.y+s.y};if(c(p))return;var h=8*p.y+p.x;if(!t[h]){var C=a.eq(h);if(!C.is(l)){l=l.add(C);var m=t[u];r.data("jumpedPieces")&&(m=m.add(r.data("jumpedPieces"))),C.data("jumpedPieces",m),i(p,n,!0)}}}else if(!o){var x=a.eq(u);x.data("jumpedPieces",$()),l=l.add(x)}}})}}(s,d,!1),l}function n(e,a,t){e.css("top",a),e.css("left",t)}function o(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function r(){$("#moveCounter").html(parseInt($("#moveCounter").html(),10)+1)}function d(){location.reload()}for(var c=46,l=2,v=$("div#board"),f=$("div#pieces"),u=$("#reset-button"),p=null,h=0;h<64;h++)v.append($("<div/>").addClass("square"));!function(){function e(e){return e%8%2^Math.floor(e/8)%2}$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}();for(var C=0;C<24;C++)f.append($("<div/>").addClass("piece"));!function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),$("div.piece.light").each(function(e,a){var i=Math.floor(e/4),s=e%4*2+(1-i%2),o=t(s,i);n($(a),o.top,o.left)}),$("div.piece.dark").each(function(e,a){var i=Math.floor(e/4)+5,s=e%4*2+(1-i%2),o=t(s,i);n($(a),o.top,o.left)}),u.on("click",function(){d()}),$("div.piece").on("click",function(e){var t=$(e.target);o(t),a(),t.hasClass("selected")&&s(t).addClass("movable")}),$("div.square").on("click",function(i){e();var s=$(i.target);if(s.hasClass("movable")){var o=$("div.piece.selected");if(1===o.length){var d=s.prevAll().length,c=d%8,l=Math.floor(d/8),v=t(c,l);n(o,v.top,v.left),r(),o.removeClass("selected"),$("div.square").removeClass("movable"),a()}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
