"use strict";$(function(){function e(){var e=$(event.target).position();return C=i(e.top,e.left)}function a(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function t(e,a){return{top:a*(v+f)+"px",left:e*(v+f)+"px"}}function i(e,a){return{x:a/(v+f),y:e/(v+f)}}function s(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var s=$(a).position(),n=i(s.top,s.left),o=8*n.y+n.x;t[o]=$(a)});var s=i(e.position().top,e.position().left),n=[{x:1,y:1},{x:-1,y:1}],o=[{x:1,y:-1},{x:-1,y:-1}],r=n.concat(o),l=void 0;l=e.hasClass("king")?r:e.hasClass("light")?n:o;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},d=$();return function i(s,n,o){if(!c(s)){var r=a.eq(8*s.y+s.x);$.each(n,function(n,l){var v={x:l.x+s.x,y:l.y+s.y};if(!c(v)){var f=8*v.y+v.x;if(t[f]){if(e.hasClass("dark")){if(t[f].hasClass("dark"))return}else if(t[f].hasClass("light"))return;var u={x:2*l.x+s.x,y:2*l.y+s.y};if(c(u))return;var p=8*u.y+u.x;if(!t[p]){var h=a.eq(p);if(!h.is(d)){d=d.add(h);var C=t[f];r.data("jumpedPieces")&&(C=C.add(r.data("jumpedPieces"))),h.data("jumpedPieces",C),i(u,l,!0)}}}else if(!o){var m=a.eq(f);m.data("jumpedPieces",$()),d=d.add(m)}}})}}(s,l,!1),d}function n(e,a,t){e.css("top",a),e.css("left",t)}function o(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function r(){$("#moveCounter").html(parseInt($("#moveCounter").html(),10)+1)}function l(e){e.data("jumpedPieces").remove()}function c(e,a){for(var t=0;t<64;t++)(a<8||a>=56)&&e.addClass("king")}function d(){location.reload()}for(var v=46,f=2,u=$("div#board"),p=$("div#pieces"),h=$("#reset-button"),C=null,m=0;m<64;m++)u.append($("<div/>").addClass("square"));!function(){function e(e){return e%8%2^Math.floor(e/8)%2}$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}();for(var x=0;x<24;x++)p.append($("<div/>").addClass("piece"));!function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),function(){$("div.piece.dark").each(function(e,a){var i=Math.floor(e/4)+5,s=e%4*2+(1-i%2),o=t(s,i);n($(a),o.top,o.left)})}(),function(){var e=$("div.piece.light");e.each(function(a,i){console.log(e.length);var s=Math.floor(a/4),o=a%4*2+(1-s%2),r=t(o,s);n($(i),r.top,r.left)})}(),h.on("click",function(){d()}),$("div.piece").on("click",function(e){var t=$(e.target);o(t),a(),t.hasClass("selected")&&s(t).addClass("movable")}),$("div.square").on("click",function(i){e();var s=$(i.target);if(s.hasClass("movable")){var o=$("div.piece.selected");if(1===o.length){var d=s.prevAll().length,v=d%8,f=Math.floor(d/8),u=t(v,f);n(o,u.top,u.left),l(s),c(o,s.prevAll().length),r(),o.removeClass("selected"),$("div.square").removeClass("movable"),a()}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
