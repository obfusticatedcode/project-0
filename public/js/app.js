"use strict";$(function(){function e(e,o){this.element=e,this.position=o,console.log("This squares' position is: "+o),this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,o,i){return Math.sqrt(Math.pow(e-s,2)+Math.pow(o-i,2))}function o(e,s){this.element=e,console.log(this.element),this.position=s,console.log("The piece position is: "+s),this.player="",this.element<12?this.player=1:this.player=2}console.log("jQuery is working!");var i=$("#checkers-board"),n=$(".squares"),t=$("#player1"),r=$("#player2");console.log(i+" ");var l=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],a=[],p=[],c=0,h=0,d=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){for(var s=0;s<l.length;s++){l[s];for(var i=0;i<l[s].length;i++)l[s][i],s%2==1&&i%2==0?(n.append("<div class='square' id='square"+c+"' style='top:"+d[s]+"; left:"+d[i]+"'></div>"),p[c]=new e($("#squares"+c),[parseInt(s),parseInt(i)]),c++):s%2==0&&i%2==1&&(n.append("<div class='square' id='square"+c+"' style='top:"+d[s]+"; left:"+d[i]+"'></div>"),p[c]=new e($("#square"+c),[parseInt(s),parseInt(i)]),c++),1===l[s][i]?(t.append("<div class='player1-pieces' id='"+h+"' style='top:"+d[s]+"; left:"+d[i]+";'></div>"),a[h]=new o($("#"+h),[parseInt(s),parseInt(i)]),h++,console.log("checkersBoard row is: "+l[s]+" "),console.log("checkersBoard column is: "+l[i]+" "),console.log("checkersBoard row and column is: "+l[s][i])):2===l[s][i]&&(r.append("<div class='player2-pieces' id='"+h+"' style='top:"+d[s]+"; left:"+d[i]+";'></div>"),a[h]=new o($("#"+h),[parseInt(s),parseInt(i)]),h++,console.log("checkersBoard row is: "+l[s]+" "),console.log("checkersBoard column is: "+l[i]+" "),console.log("checkersBoard 2 row and column is: "+l[s][i]))}}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
