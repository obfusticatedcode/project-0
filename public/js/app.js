"use strict";$(function(){function e(){var e=$(event.target).position();return x=n(e.top,e.left)}function a(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function t(e){var a="";a="light"===e?"#lightMoveCount":"#darkMoveCount";var t=parseInt($(a).html());t++,console.log(t),$(a).html(t)}function i(e,a){return{top:a*(f+h)+"px",left:e*(f+h)+"px"}}function n(e,a){return{x:a/(f+h),y:e/(f+h)}}function s(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var i=$(a).position(),s=n(i.top,i.left),o=8*s.y+s.x;t[o]=$(a)});var i=n(e.position().top,e.position().left),s=[{x:1,y:1},{x:-1,y:1}],o=[{x:1,y:-1},{x:-1,y:-1}],r=s.concat(o),l=void 0;l=e.hasClass("king")?r:e.hasClass("light")?s:o;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},d=$();return function i(n,s,o){if(!c(n)){var r=a.eq(8*n.y+n.x);$.each(s,function(s,l){var v={x:l.x+n.x,y:l.y+n.y};if(!c(v)){var u=8*v.y+v.x;if(t[u]){if(e.hasClass("dark")){if(t[u].hasClass("dark"))return}else if(t[u].hasClass("light"))return;var f={x:2*l.x+n.x,y:2*l.y+n.y};if(c(f))return;var h=8*f.y+f.x;if(!t[h]){var p=a.eq(h);if(!p.is(d)){d=d.add(p);var C=t[u];r.data("jumpedPieces")&&(C=C.add(r.data("jumpedPieces"))),p.data("jumpedPieces",C),i(f,l,!0)}}}else if(!o){var g=a.eq(u);g.data("jumpedPieces",$()),d=d.add(g)}}})}}(i,l,!1),d}function o(e,a,t){e.css("top",a),e.css("left",t)}function r(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function l(){return m.html(parseInt($("#moveCounter").html(),10)+1)}function c(e){e.data("jumpedPieces").remove()}function d(e,a){for(var t=0;t<64;t++)(a<8||a>=56)&&e.addClass("king")}function v(){var e=$("div.piece.light"),a=$("div.piece.dark"),t=a.length,i=e.length;return 0===t?console.log("Player 1 wins"):0===i?console.log("Player 2 wins"):1===i&&1===t?console.log("It's a draw"):void 0}function u(){location.reload()}var f=46,h=2,p=$("div#board"),C=$("div#pieces"),g=$("#reset-button"),m=$("#moveCounter"),x=null;!function(){function e(e){return e%8%2^Math.floor(e/8)%2}for(var a=0;a<64;a++)p.append($("<div/>").addClass("square"));for(var t=0;t<24;t++)C.append($("<div/>").addClass("piece"));$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}(),function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),function(){$("div.piece.dark").each(function(e,a){var t=Math.floor(e/4)+5,n=e%4*2+(1-t%2),s=i(n,t);o($(a),s.top,s.left)})}(),function(){var e=$("div.piece.light");e.each(function(a,t){console.log(e.length);var n=Math.floor(a/4),s=a%4*2+(1-n%2),r=i(s,n);o($(t),r.top,r.left)})}(),function(){$("div.piece").on("click",function(e){var t=$(e.target);r(t),a(),t.hasClass("selected")&&s(t).addClass("movable")})}(),$("div.square").on("click",function(n){e();var s=$(n.target);if(s.hasClass("movable")){var r=$("div.piece.selected");if(1===r.length){var u=s.prevAll().length,f=u%8,h=Math.floor(u/8),p=i(f,h);o(r,p.top,p.left),c(s),d(r,s.prevAll().length),r.removeClass("selected"),$("div.square").removeClass("movable"),v(),l();var C="";C=!0===r.hasClass("light")?"light":"dark",t(C),a()}}}),g.on("click",function(){u()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
