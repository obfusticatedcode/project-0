"use strict";$(function(){function e(e){var a="";a="light"===e?"#lightMoveCount":"#darkMoveCount";var t=parseInt($(a).html());t++,$(a).html(t),console.log(t)}function a(){var e=$(event.target).position();return x=n(e.top,e.left)}function t(){$("div.square").removeData("jumpedPieces").removeClass("movable")}function i(e,a){return{top:a*(f+h)+"px",left:e*(f+h)+"px"}}function n(e,a){return{x:a/(f+h),y:e/(f+h)}}function o(e){var a=$("div.square"),t={};$("div.piece").each(function(e,a){var i=$(a).position(),o=n(i.top,i.left),s=8*o.y+o.x;t[s]=$(a)});var i=n(e.position().top,e.position().left),o=[{x:1,y:1},{x:-1,y:1}],s=[{x:1,y:-1},{x:-1,y:-1}],l=o.concat(s),r=void 0;r=e.hasClass("king")?l:e.hasClass("light")?o:s;var c=function(e){return!(e.x>=0&&e.x<8&&e.y>=0&&e.y<8)},d=$();return function i(n,o,s){if(!c(n)){var l=a.eq(8*n.y+n.x);$.each(o,function(o,r){var v={x:r.x+n.x,y:r.y+n.y};if(!c(v)){var u=8*v.y+v.x;if(t[u]){if(e.hasClass("dark")){if(t[u].hasClass("dark"))return}else if(t[u].hasClass("light"))return;var f={x:2*r.x+n.x,y:2*r.y+n.y};if(c(f))return;var h=8*f.y+f.x;if(!t[h]){var p=a.eq(h);if(!p.is(d)){d=d.add(p);var C=t[u];l.data("jumpedPieces")&&(C=C.add(l.data("jumpedPieces"))),p.data("jumpedPieces",C),i(f,r,!0)}}}else if(!s){var g=a.eq(u);g.data("jumpedPieces",$()),d=d.add(g)}}})}}(i,r,!1),d}function s(e,a,t){e.css("top",a),e.css("left",t)}function l(e){e.hasClass("selected")?e.removeClass("selected"):($("div.piece").each(function(e,a){$(a).hasClass("selected")&&$(a).removeClass("selected")}),e.addClass("selected"))}function r(){return m.html(parseInt($("#moveCounter").html(),10)+1)}function c(e){e.data("jumpedPieces").remove()}function d(e,a){for(var t=0;t<64;t++)(a<8||a>=56)&&e.addClass("king")}function v(){var e=$("div.piece.light"),a=$("div.piece.dark"),t=a.length,i=e.length;return 0===t?console.log("Player 1 wins"):0===i?console.log("Player 2 wins"):1===i&&1===t?console.log("It's a draw"):void 0}function u(){location.reload()}var f=46,h=2,p=$("div#board"),C=$("div#pieces"),g=$("#reset-button"),m=$("#moveCounter"),x=null;!function(){function e(e){return e%8%2^Math.floor(e/8)%2}for(var a=0;a<64;a++)p.append($("<div/>").addClass("square"));for(var t=0;t<24;t++)C.append($("<div/>").addClass("piece"));$("div.square").each(function(a){0===e(a)?$(this).addClass("light"):$(this).addClass("dark")})}(),function(){$("piece"),$("div.piece:even").addClass("light"),$("div.piece:odd").addClass("dark")}(),function(){$("div.piece.dark").each(function(e,a){var t=Math.floor(e/4)+5,n=e%4*2+(1-t%2),o=i(n,t);s($(a),o.top,o.left)})}(),function(){var e=$("div.piece.light");e.each(function(a,t){console.log(e.length);var n=Math.floor(a/4),o=a%4*2+(1-n%2),l=i(o,n);s($(t),l.top,l.left)})}();var y=!0;!function(){!0===y&&(console.log(y),$("div.piece").on("click",function(e){var a=$(e.target);l(a),t(),a.hasClass("selected")&&o(a).addClass("movable")}))}(),$("div.square").on("click",function(n){a();var o=$(n.target);if(o.hasClass("movable")){var l=$("div.piece.selected");if(1===l.length){var u=o.prevAll().length,f=u%8,h=Math.floor(u/8),p=i(f,h);s(l,p.top,p.left),c(o),d(l,o.prevAll().length),l.removeClass("selected"),$("div.square").removeClass("movable"),v(),r();var C="";C=!0===l.hasClass("light")?"light":"dark",e(C),t()}}}),g.on("click",function(){u()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
