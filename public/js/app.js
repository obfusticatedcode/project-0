"use strict";$(function(){function e(e,i){this.element=e,this.position=i,console.log("This squares' position is: "+i),this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,i,n){return Math.sqrt(Math.pow(e-s,2)+Math.pow(i-n,2))}function i(e,s){this.element=e,console.log(this.element),this.position=s,console.log("The piece position is: "+s),this.player="",this.element<12?this.player1:this.player2}console.log("jQuery is working!");var n=$("#checkers-board"),t=$(".squares"),o=$(".pieces"),p=$("#player1"),l=$("#player2"),a=$(".player1-pieces");$(".player2-pieces"),$("#checkers-board .pieces .player1 .selected");console.log(n+" ");var r=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],c=[],h=[],v=1,d=2,u=0,m=0,y=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"];!function(){for(var s=0;s<r.length;s++){r[s];for(var n=0;n<r[s].length;n++)r[s][n],s%2==1&&n%2==0?(t.append("<div class='square' id='square"+u+"' style='top:"+y[s]+"; left:"+y[n]+"'></div>"),h[u]=new e($("#squares"+u),[parseInt(s),parseInt(n)]),u++):s%2==0&&n%2==1&&(t.append("<div class='square' id='square"+u+"' style='top:"+y[s]+"; left:"+y[n]+"'></div>"),h[u]=new e($("#square"+u),[parseInt(s),parseInt(n)]),u++),r[s][n]===v?(p.append("<div class='player1-pieces' id='"+m+"' style='top:"+y[s]+"; left:"+y[n]+";'></div>"),c[m]=new i($("#"+m),[parseInt(s),parseInt(n)]),m++):r[s][n]===d&&(l.append("<div class='player2-pieces' id='"+m+"' style='top:"+y[s]+"; left:"+y[n]+";'></div>"),c[m]=new i($("#"+m),[parseInt(s),parseInt(n)]),m++)}}(),t.on("click",function(){console.log("click events works on the squares!")}),o.on("click",function(){console.log("click events works on the pieces!"),a.addClass("selected"),console.log(a)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
