"use strict";$(function(){function e(e,o){this.element=e,this.position=o,console.log("This squares' position is: "+o),this.inRange=function(e){return s(this.position[0],this.position[1],e.position[0],e.position[1])===Math.sqrt(2)?"normal-move":s(this.position[0],this.position[1],e.position[0],e.position[1])===2*Math.sqrt(2)?"jump-move":void 0}}function s(e,s,o,i){return Math.sqrt(Math.pow(e-s,2)+Math.pow(o-i,2))}function o(e,s){this.element=e,console.log(this.element),this.position=s,console.log("The piece position is: "+s),this.player="",this.element<12?this.player=1:this.player=2}console.log("jQuery is working!");var i=$("#checkers-board"),n=$(".squares"),t=$(".player1-pieces"),r=$(".player2-pieces");console.log(i+" ");for(var l=[[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,0,2,0,2,0,2,0],[0,2,0,2,0,2,0,2],[2,0,2,0,2,0,2,0]],a=[],p=[],c=0,h=0,d=["0vmin","10vmin","20vmin","30vmin","40vmin","50vmin","60vmin","70vmin"],v=0;v<l.length;v++)for(var u=0;u<l[v].length;u++)l[v][u],v%2==1?u%2==0&&(n.append("<div class='square' id='square"+c+"' style='top:"+d[v]+"; left:"+d[u]+"'></div>"),p[c]=new e($("#squares"+c),[parseInt(v),parseInt(u)]),c++):u%2==1&&(n.append("<div class='square' id='square"+c+"' style='top:"+d[v]+"; left:"+d[u]+"'></div>"),p[c]=new e($("#square"+c),[parseInt(v),parseInt(u)]),c++),1===l[v][u]?(t.append("<div class='checkers-piece' id='"+h+"' style='top:"+d[v]+"; left:"+d[u]+"';'></div>"),a[h]=new o($("#"+h),[parseInt(v),parseInt(u)]),h+=1,console.log("checkersBoard row is: "+l[v]+" "),console.log("checkersBoard column is: "+l[u]+" "),console.log("checkersBoard row and column is: "+l[v][u]+" ")):2===l[v][u]&&(r.append("<div class='checkers-piece' id='"+h+"' style='top:"+d[v]+"; left:"+d[u]+"';'></div>"),a[h]=new o($("#"+h),[parseInt(v),parseInt(u)]),h+=1,console.log("checkersBoard row is: "+l[v]+" "),console.log("checkersBoard column is: "+l[u]+" "))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
